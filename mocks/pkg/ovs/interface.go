// Code generated by MockGen. DO NOT EDIT.
// Source: ../pkg/ovs/interface.go

// Package ovs is a generated GoMock package.
package ovs

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ovnnb "github.com/kubeovn/kube-ovn/pkg/ovsdb/ovnnb"
	ovsdb "github.com/ovn-org/libovsdb/ovsdb"
)

// MockNbGlobal is a mock of NbGlobal interface.
type MockNbGlobal struct {
	ctrl     *gomock.Controller
	recorder *MockNbGlobalMockRecorder
}

// MockNbGlobalMockRecorder is the mock recorder for MockNbGlobal.
type MockNbGlobalMockRecorder struct {
	mock *MockNbGlobal
}

// NewMockNbGlobal creates a new mock instance.
func NewMockNbGlobal(ctrl *gomock.Controller) *MockNbGlobal {
	mock := &MockNbGlobal{ctrl: ctrl}
	mock.recorder = &MockNbGlobalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNbGlobal) EXPECT() *MockNbGlobalMockRecorder {
	return m.recorder
}

// GetNbGlobal mocks base method.
func (m *MockNbGlobal) GetNbGlobal() (*ovnnb.NBGlobal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNbGlobal")
	ret0, _ := ret[0].(*ovnnb.NBGlobal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNbGlobal indicates an expected call of GetNbGlobal.
func (mr *MockNbGlobalMockRecorder) GetNbGlobal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNbGlobal", reflect.TypeOf((*MockNbGlobal)(nil).GetNbGlobal))
}

// UpdateNbGlobal mocks base method.
func (m *MockNbGlobal) UpdateNbGlobal(nbGlobal *ovnnb.NBGlobal, fields ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{nbGlobal}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNbGlobal", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNbGlobal indicates an expected call of UpdateNbGlobal.
func (mr *MockNbGlobalMockRecorder) UpdateNbGlobal(nbGlobal interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{nbGlobal}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNbGlobal", reflect.TypeOf((*MockNbGlobal)(nil).UpdateNbGlobal), varargs...)
}

// MockLogicalRouter is a mock of LogicalRouter interface.
type MockLogicalRouter struct {
	ctrl     *gomock.Controller
	recorder *MockLogicalRouterMockRecorder
}

// MockLogicalRouterMockRecorder is the mock recorder for MockLogicalRouter.
type MockLogicalRouterMockRecorder struct {
	mock *MockLogicalRouter
}

// NewMockLogicalRouter creates a new mock instance.
func NewMockLogicalRouter(ctrl *gomock.Controller) *MockLogicalRouter {
	mock := &MockLogicalRouter{ctrl: ctrl}
	mock.recorder = &MockLogicalRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogicalRouter) EXPECT() *MockLogicalRouterMockRecorder {
	return m.recorder
}

// GetLogicalRouter mocks base method.
func (m *MockLogicalRouter) GetLogicalRouter(lrName string, ignoreNotFound bool) (*ovnnb.LogicalRouter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogicalRouter", lrName, ignoreNotFound)
	ret0, _ := ret[0].(*ovnnb.LogicalRouter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogicalRouter indicates an expected call of GetLogicalRouter.
func (mr *MockLogicalRouterMockRecorder) GetLogicalRouter(lrName, ignoreNotFound interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogicalRouter", reflect.TypeOf((*MockLogicalRouter)(nil).GetLogicalRouter), lrName, ignoreNotFound)
}

// MockLogicalRouterPort is a mock of LogicalRouterPort interface.
type MockLogicalRouterPort struct {
	ctrl     *gomock.Controller
	recorder *MockLogicalRouterPortMockRecorder
}

// MockLogicalRouterPortMockRecorder is the mock recorder for MockLogicalRouterPort.
type MockLogicalRouterPortMockRecorder struct {
	mock *MockLogicalRouterPort
}

// NewMockLogicalRouterPort creates a new mock instance.
func NewMockLogicalRouterPort(ctrl *gomock.Controller) *MockLogicalRouterPort {
	mock := &MockLogicalRouterPort{ctrl: ctrl}
	mock.recorder = &MockLogicalRouterPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogicalRouterPort) EXPECT() *MockLogicalRouterPortMockRecorder {
	return m.recorder
}

// AddLogicalRouterPort mocks base method.
func (m *MockLogicalRouterPort) AddLogicalRouterPort(lr, name, mac, networks string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLogicalRouterPort", lr, name, mac, networks)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLogicalRouterPort indicates an expected call of AddLogicalRouterPort.
func (mr *MockLogicalRouterPortMockRecorder) AddLogicalRouterPort(lr, name, mac, networks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLogicalRouterPort", reflect.TypeOf((*MockLogicalRouterPort)(nil).AddLogicalRouterPort), lr, name, mac, networks)
}

// LogicalRouterPortExists mocks base method.
func (m *MockLogicalRouterPort) LogicalRouterPortExists(lrpName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogicalRouterPortExists", lrpName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogicalRouterPortExists indicates an expected call of LogicalRouterPortExists.
func (mr *MockLogicalRouterPortMockRecorder) LogicalRouterPortExists(lrpName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogicalRouterPortExists", reflect.TypeOf((*MockLogicalRouterPort)(nil).LogicalRouterPortExists), lrpName)
}

// MockLogicalSwitchPort is a mock of LogicalSwitchPort interface.
type MockLogicalSwitchPort struct {
	ctrl     *gomock.Controller
	recorder *MockLogicalSwitchPortMockRecorder
}

// MockLogicalSwitchPortMockRecorder is the mock recorder for MockLogicalSwitchPort.
type MockLogicalSwitchPortMockRecorder struct {
	mock *MockLogicalSwitchPort
}

// NewMockLogicalSwitchPort creates a new mock instance.
func NewMockLogicalSwitchPort(ctrl *gomock.Controller) *MockLogicalSwitchPort {
	mock := &MockLogicalSwitchPort{ctrl: ctrl}
	mock.recorder = &MockLogicalSwitchPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogicalSwitchPort) EXPECT() *MockLogicalSwitchPortMockRecorder {
	return m.recorder
}

// GetLogicalSwitchPort mocks base method.
func (m *MockLogicalSwitchPort) GetLogicalSwitchPort(lspName string, ignoreNotFound bool) (*ovnnb.LogicalSwitchPort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogicalSwitchPort", lspName, ignoreNotFound)
	ret0, _ := ret[0].(*ovnnb.LogicalSwitchPort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogicalSwitchPort indicates an expected call of GetLogicalSwitchPort.
func (mr *MockLogicalSwitchPortMockRecorder) GetLogicalSwitchPort(lspName, ignoreNotFound interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogicalSwitchPort", reflect.TypeOf((*MockLogicalSwitchPort)(nil).GetLogicalSwitchPort), lspName, ignoreNotFound)
}

// ListLogicalSwitchPorts mocks base method.
func (m *MockLogicalSwitchPort) ListLogicalSwitchPorts(needVendorFilter bool, externalIDs map[string]string) ([]ovnnb.LogicalSwitchPort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogicalSwitchPorts", needVendorFilter, externalIDs)
	ret0, _ := ret[0].([]ovnnb.LogicalSwitchPort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogicalSwitchPorts indicates an expected call of ListLogicalSwitchPorts.
func (mr *MockLogicalSwitchPortMockRecorder) ListLogicalSwitchPorts(needVendorFilter, externalIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogicalSwitchPorts", reflect.TypeOf((*MockLogicalSwitchPort)(nil).ListLogicalSwitchPorts), needVendorFilter, externalIDs)
}

// MockPortGroup is a mock of PortGroup interface.
type MockPortGroup struct {
	ctrl     *gomock.Controller
	recorder *MockPortGroupMockRecorder
}

// MockPortGroupMockRecorder is the mock recorder for MockPortGroup.
type MockPortGroupMockRecorder struct {
	mock *MockPortGroup
}

// NewMockPortGroup creates a new mock instance.
func NewMockPortGroup(ctrl *gomock.Controller) *MockPortGroup {
	mock := &MockPortGroup{ctrl: ctrl}
	mock.recorder = &MockPortGroupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortGroup) EXPECT() *MockPortGroupMockRecorder {
	return m.recorder
}

// PortGroupExists mocks base method.
func (m *MockPortGroup) PortGroupExists(pgName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PortGroupExists", pgName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PortGroupExists indicates an expected call of PortGroupExists.
func (mr *MockPortGroupMockRecorder) PortGroupExists(pgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortGroupExists", reflect.TypeOf((*MockPortGroup)(nil).PortGroupExists), pgName)
}

// PortGroupUpdatePorts mocks base method.
func (m *MockPortGroup) PortGroupUpdatePorts(pgName string, op ovsdb.Mutator, lspNames ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{pgName, op}
	for _, a := range lspNames {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PortGroupUpdatePorts", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PortGroupUpdatePorts indicates an expected call of PortGroupUpdatePorts.
func (mr *MockPortGroupMockRecorder) PortGroupUpdatePorts(pgName, op interface{}, lspNames ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{pgName, op}, lspNames...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortGroupUpdatePorts", reflect.TypeOf((*MockPortGroup)(nil).PortGroupUpdatePorts), varargs...)
}

// MockLogicalRouterStaticRoute is a mock of LogicalRouterStaticRoute interface.
type MockLogicalRouterStaticRoute struct {
	ctrl     *gomock.Controller
	recorder *MockLogicalRouterStaticRouteMockRecorder
}

// MockLogicalRouterStaticRouteMockRecorder is the mock recorder for MockLogicalRouterStaticRoute.
type MockLogicalRouterStaticRouteMockRecorder struct {
	mock *MockLogicalRouterStaticRoute
}

// NewMockLogicalRouterStaticRoute creates a new mock instance.
func NewMockLogicalRouterStaticRoute(ctrl *gomock.Controller) *MockLogicalRouterStaticRoute {
	mock := &MockLogicalRouterStaticRoute{ctrl: ctrl}
	mock.recorder = &MockLogicalRouterStaticRouteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogicalRouterStaticRoute) EXPECT() *MockLogicalRouterStaticRouteMockRecorder {
	return m.recorder
}

// GetLogicalRouterRouteByOpts mocks base method.
func (m *MockLogicalRouterStaticRoute) GetLogicalRouterRouteByOpts(key, value string) ([]ovnnb.LogicalRouterStaticRoute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogicalRouterRouteByOpts", key, value)
	ret0, _ := ret[0].([]ovnnb.LogicalRouterStaticRoute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogicalRouterRouteByOpts indicates an expected call of GetLogicalRouterRouteByOpts.
func (mr *MockLogicalRouterStaticRouteMockRecorder) GetLogicalRouterRouteByOpts(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogicalRouterRouteByOpts", reflect.TypeOf((*MockLogicalRouterStaticRoute)(nil).GetLogicalRouterRouteByOpts), key, value)
}

// ListLogicalRouterStaticRoutes mocks base method.
func (m *MockLogicalRouterStaticRoute) ListLogicalRouterStaticRoutes(externalIDs map[string]string) ([]ovnnb.LogicalRouterStaticRoute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogicalRouterStaticRoutes", externalIDs)
	ret0, _ := ret[0].([]ovnnb.LogicalRouterStaticRoute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogicalRouterStaticRoutes indicates an expected call of ListLogicalRouterStaticRoutes.
func (mr *MockLogicalRouterStaticRouteMockRecorder) ListLogicalRouterStaticRoutes(externalIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogicalRouterStaticRoutes", reflect.TypeOf((*MockLogicalRouterStaticRoute)(nil).ListLogicalRouterStaticRoutes), externalIDs)
}

// MockLogicalRouterPolicy is a mock of LogicalRouterPolicy interface.
type MockLogicalRouterPolicy struct {
	ctrl     *gomock.Controller
	recorder *MockLogicalRouterPolicyMockRecorder
}

// MockLogicalRouterPolicyMockRecorder is the mock recorder for MockLogicalRouterPolicy.
type MockLogicalRouterPolicyMockRecorder struct {
	mock *MockLogicalRouterPolicy
}

// NewMockLogicalRouterPolicy creates a new mock instance.
func NewMockLogicalRouterPolicy(ctrl *gomock.Controller) *MockLogicalRouterPolicy {
	mock := &MockLogicalRouterPolicy{ctrl: ctrl}
	mock.recorder = &MockLogicalRouterPolicyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogicalRouterPolicy) EXPECT() *MockLogicalRouterPolicyMockRecorder {
	return m.recorder
}

// AddLogicalRouterPolicy mocks base method.
func (m *MockLogicalRouterPolicy) AddLogicalRouterPolicy(lrName string, priority int, match, action string, nextHops []string, externalIDs map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLogicalRouterPolicy", lrName, priority, match, action, nextHops, externalIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLogicalRouterPolicy indicates an expected call of AddLogicalRouterPolicy.
func (mr *MockLogicalRouterPolicyMockRecorder) AddLogicalRouterPolicy(lrName, priority, match, action, nextHops, externalIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLogicalRouterPolicy", reflect.TypeOf((*MockLogicalRouterPolicy)(nil).AddLogicalRouterPolicy), lrName, priority, match, action, nextHops, externalIDs)
}

// DeleteLogicalRouterPolicy mocks base method.
func (m *MockLogicalRouterPolicy) DeleteLogicalRouterPolicy(lrName string, priority int, match string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLogicalRouterPolicy", lrName, priority, match)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLogicalRouterPolicy indicates an expected call of DeleteLogicalRouterPolicy.
func (mr *MockLogicalRouterPolicyMockRecorder) DeleteLogicalRouterPolicy(lrName, priority, match interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLogicalRouterPolicy", reflect.TypeOf((*MockLogicalRouterPolicy)(nil).DeleteLogicalRouterPolicy), lrName, priority, match)
}

// DeleteRouterPolicy mocks base method.
func (m *MockLogicalRouterPolicy) DeleteRouterPolicy(lr *ovnnb.LogicalRouter, uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouterPolicy", lr, uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRouterPolicy indicates an expected call of DeleteRouterPolicy.
func (mr *MockLogicalRouterPolicyMockRecorder) DeleteRouterPolicy(lr, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouterPolicy", reflect.TypeOf((*MockLogicalRouterPolicy)(nil).DeleteRouterPolicy), lr, uuid)
}

// ListLogicalRouterPolicies mocks base method.
func (m *MockLogicalRouterPolicy) ListLogicalRouterPolicies(externalIDs map[string]string) ([]ovnnb.LogicalRouterPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogicalRouterPolicies", externalIDs)
	ret0, _ := ret[0].([]ovnnb.LogicalRouterPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogicalRouterPolicies indicates an expected call of ListLogicalRouterPolicies.
func (mr *MockLogicalRouterPolicyMockRecorder) ListLogicalRouterPolicies(externalIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogicalRouterPolicies", reflect.TypeOf((*MockLogicalRouterPolicy)(nil).ListLogicalRouterPolicies), externalIDs)
}

// MockOvnClient is a mock of OvnClient interface.
type MockOvnClient struct {
	ctrl     *gomock.Controller
	recorder *MockOvnClientMockRecorder
}

// MockOvnClientMockRecorder is the mock recorder for MockOvnClient.
type MockOvnClientMockRecorder struct {
	mock *MockOvnClient
}

// NewMockOvnClient creates a new mock instance.
func NewMockOvnClient(ctrl *gomock.Controller) *MockOvnClient {
	mock := &MockOvnClient{ctrl: ctrl}
	mock.recorder = &MockOvnClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOvnClient) EXPECT() *MockOvnClientMockRecorder {
	return m.recorder
}

// AddLogicalRouterPolicy mocks base method.
func (m *MockOvnClient) AddLogicalRouterPolicy(lrName string, priority int, match, action string, nextHops []string, externalIDs map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLogicalRouterPolicy", lrName, priority, match, action, nextHops, externalIDs)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLogicalRouterPolicy indicates an expected call of AddLogicalRouterPolicy.
func (mr *MockOvnClientMockRecorder) AddLogicalRouterPolicy(lrName, priority, match, action, nextHops, externalIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLogicalRouterPolicy", reflect.TypeOf((*MockOvnClient)(nil).AddLogicalRouterPolicy), lrName, priority, match, action, nextHops, externalIDs)
}

// AddLogicalRouterPort mocks base method.
func (m *MockOvnClient) AddLogicalRouterPort(lr, name, mac, networks string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLogicalRouterPort", lr, name, mac, networks)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddLogicalRouterPort indicates an expected call of AddLogicalRouterPort.
func (mr *MockOvnClientMockRecorder) AddLogicalRouterPort(lr, name, mac, networks interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLogicalRouterPort", reflect.TypeOf((*MockOvnClient)(nil).AddLogicalRouterPort), lr, name, mac, networks)
}

// DeleteLogicalRouterPolicy mocks base method.
func (m *MockOvnClient) DeleteLogicalRouterPolicy(lrName string, priority int, match string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLogicalRouterPolicy", lrName, priority, match)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLogicalRouterPolicy indicates an expected call of DeleteLogicalRouterPolicy.
func (mr *MockOvnClientMockRecorder) DeleteLogicalRouterPolicy(lrName, priority, match interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLogicalRouterPolicy", reflect.TypeOf((*MockOvnClient)(nil).DeleteLogicalRouterPolicy), lrName, priority, match)
}

// DeleteRouterPolicy mocks base method.
func (m *MockOvnClient) DeleteRouterPolicy(lr *ovnnb.LogicalRouter, uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRouterPolicy", lr, uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRouterPolicy indicates an expected call of DeleteRouterPolicy.
func (mr *MockOvnClientMockRecorder) DeleteRouterPolicy(lr, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRouterPolicy", reflect.TypeOf((*MockOvnClient)(nil).DeleteRouterPolicy), lr, uuid)
}

// GetLogicalRouter mocks base method.
func (m *MockOvnClient) GetLogicalRouter(lrName string, ignoreNotFound bool) (*ovnnb.LogicalRouter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogicalRouter", lrName, ignoreNotFound)
	ret0, _ := ret[0].(*ovnnb.LogicalRouter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogicalRouter indicates an expected call of GetLogicalRouter.
func (mr *MockOvnClientMockRecorder) GetLogicalRouter(lrName, ignoreNotFound interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogicalRouter", reflect.TypeOf((*MockOvnClient)(nil).GetLogicalRouter), lrName, ignoreNotFound)
}

// GetLogicalRouterRouteByOpts mocks base method.
func (m *MockOvnClient) GetLogicalRouterRouteByOpts(key, value string) ([]ovnnb.LogicalRouterStaticRoute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogicalRouterRouteByOpts", key, value)
	ret0, _ := ret[0].([]ovnnb.LogicalRouterStaticRoute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogicalRouterRouteByOpts indicates an expected call of GetLogicalRouterRouteByOpts.
func (mr *MockOvnClientMockRecorder) GetLogicalRouterRouteByOpts(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogicalRouterRouteByOpts", reflect.TypeOf((*MockOvnClient)(nil).GetLogicalRouterRouteByOpts), key, value)
}

// GetLogicalSwitchPort mocks base method.
func (m *MockOvnClient) GetLogicalSwitchPort(lspName string, ignoreNotFound bool) (*ovnnb.LogicalSwitchPort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogicalSwitchPort", lspName, ignoreNotFound)
	ret0, _ := ret[0].(*ovnnb.LogicalSwitchPort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogicalSwitchPort indicates an expected call of GetLogicalSwitchPort.
func (mr *MockOvnClientMockRecorder) GetLogicalSwitchPort(lspName, ignoreNotFound interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogicalSwitchPort", reflect.TypeOf((*MockOvnClient)(nil).GetLogicalSwitchPort), lspName, ignoreNotFound)
}

// GetNbGlobal mocks base method.
func (m *MockOvnClient) GetNbGlobal() (*ovnnb.NBGlobal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNbGlobal")
	ret0, _ := ret[0].(*ovnnb.NBGlobal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNbGlobal indicates an expected call of GetNbGlobal.
func (mr *MockOvnClientMockRecorder) GetNbGlobal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNbGlobal", reflect.TypeOf((*MockOvnClient)(nil).GetNbGlobal))
}

// ListLogicalRouterPolicies mocks base method.
func (m *MockOvnClient) ListLogicalRouterPolicies(externalIDs map[string]string) ([]ovnnb.LogicalRouterPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogicalRouterPolicies", externalIDs)
	ret0, _ := ret[0].([]ovnnb.LogicalRouterPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogicalRouterPolicies indicates an expected call of ListLogicalRouterPolicies.
func (mr *MockOvnClientMockRecorder) ListLogicalRouterPolicies(externalIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogicalRouterPolicies", reflect.TypeOf((*MockOvnClient)(nil).ListLogicalRouterPolicies), externalIDs)
}

// ListLogicalRouterStaticRoutes mocks base method.
func (m *MockOvnClient) ListLogicalRouterStaticRoutes(externalIDs map[string]string) ([]ovnnb.LogicalRouterStaticRoute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogicalRouterStaticRoutes", externalIDs)
	ret0, _ := ret[0].([]ovnnb.LogicalRouterStaticRoute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogicalRouterStaticRoutes indicates an expected call of ListLogicalRouterStaticRoutes.
func (mr *MockOvnClientMockRecorder) ListLogicalRouterStaticRoutes(externalIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogicalRouterStaticRoutes", reflect.TypeOf((*MockOvnClient)(nil).ListLogicalRouterStaticRoutes), externalIDs)
}

// ListLogicalSwitchPorts mocks base method.
func (m *MockOvnClient) ListLogicalSwitchPorts(needVendorFilter bool, externalIDs map[string]string) ([]ovnnb.LogicalSwitchPort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLogicalSwitchPorts", needVendorFilter, externalIDs)
	ret0, _ := ret[0].([]ovnnb.LogicalSwitchPort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLogicalSwitchPorts indicates an expected call of ListLogicalSwitchPorts.
func (mr *MockOvnClientMockRecorder) ListLogicalSwitchPorts(needVendorFilter, externalIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLogicalSwitchPorts", reflect.TypeOf((*MockOvnClient)(nil).ListLogicalSwitchPorts), needVendorFilter, externalIDs)
}

// LogicalRouterPortExists mocks base method.
func (m *MockOvnClient) LogicalRouterPortExists(lrpName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogicalRouterPortExists", lrpName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogicalRouterPortExists indicates an expected call of LogicalRouterPortExists.
func (mr *MockOvnClientMockRecorder) LogicalRouterPortExists(lrpName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogicalRouterPortExists", reflect.TypeOf((*MockOvnClient)(nil).LogicalRouterPortExists), lrpName)
}

// PortGroupExists mocks base method.
func (m *MockOvnClient) PortGroupExists(pgName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PortGroupExists", pgName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PortGroupExists indicates an expected call of PortGroupExists.
func (mr *MockOvnClientMockRecorder) PortGroupExists(pgName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortGroupExists", reflect.TypeOf((*MockOvnClient)(nil).PortGroupExists), pgName)
}

// PortGroupUpdatePorts mocks base method.
func (m *MockOvnClient) PortGroupUpdatePorts(pgName string, op ovsdb.Mutator, lspNames ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{pgName, op}
	for _, a := range lspNames {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PortGroupUpdatePorts", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// PortGroupUpdatePorts indicates an expected call of PortGroupUpdatePorts.
func (mr *MockOvnClientMockRecorder) PortGroupUpdatePorts(pgName, op interface{}, lspNames ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{pgName, op}, lspNames...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PortGroupUpdatePorts", reflect.TypeOf((*MockOvnClient)(nil).PortGroupUpdatePorts), varargs...)
}

// UpdateNbGlobal mocks base method.
func (m *MockOvnClient) UpdateNbGlobal(nbGlobal *ovnnb.NBGlobal, fields ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{nbGlobal}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNbGlobal", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNbGlobal indicates an expected call of UpdateNbGlobal.
func (mr *MockOvnClientMockRecorder) UpdateNbGlobal(nbGlobal interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{nbGlobal}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNbGlobal", reflect.TypeOf((*MockOvnClient)(nil).UpdateNbGlobal), varargs...)
}
