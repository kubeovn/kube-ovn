name: Build x86 Image

on:
  pull_request:
    branches:
    - master
    paths-ignore:
    - 'docs/**'
    - '**.md'
  push:
    branches:
    - master
    - release-*
    paths-ignore:
    - 'docs/**'
    - '**.md'

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

env:
  GO_VERSION: '1.19'
  GOSEC_VERSION: '2.14.0'
  KIND_VERSION: v0.17.0
  HELM_VERSION: v3.10.1

jobs:
  build-kube-ovn:
    name: Build kube-ovn
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: actions/setup-go@v3
        with:
          go-version: '${{ env.GO_VERSION }}'
          check-latest: true
        id: go

      - name: Export Go full version
        run: |
          echo "GO_FULL_VER=$(go version | awk '{print $3}')" >> "$GITHUB_ENV"

      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-

      - name: Unit test
        run: |
          go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo
          make ut

      - name: Install gosec
        run: |
          curl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s -- -b $(go env GOPATH)/bin 'v${{ env.GOSEC_VERSION }}'

      - name: Build
        run: |
          go mod tidy
          git diff --exit-code
          make lint
          make image-kube-ovn
          make tar-kube-ovn

      - name: Upload images to artifact
        uses: actions/upload-artifact@v3
        with:
          name: kube-ovn
          path: kube-ovn.tar

  build-vpc-nat-gateway:
    name: Build vpc-nat-gateway
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2

      - name: Build
        run: |
          make image-vpc-nat-gateway
          make tar-vpc-nat-gateway

      - name: Upload image to artifact
        uses: actions/upload-artifact@v3
        with:
          name: vpc-nat-gateway
          path: vpc-nat-gateway.tar

  build-centos-compile:
    name: Build centos-compile
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2

      - name: Build
        run: |
          make image-centos-compile
          make tar-centos-compile

      - name: Upload centos7-compile image to artifact
        uses: actions/upload-artifact@v3
        with:
          name: centos7-compile
          path: centos7-compile.tar

      # - name: Upload centos8-compile image to artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: centos8-compile
      #     path: centos8-compile.tar

  single-e2e:
    needs: build-kube-ovn
    name: 1-master-e2e
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3

      - name: Install Kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Load Image
        run: |
          docker load --input kube-ovn.tar

      - uses: actions/setup-go@v3
        with:
          go-version: '${{ env.GO_VERSION }}'
          check-latest: true
        id: go

      - name: Export Go full version
        run: |
          echo "GO_FULL_VER=$(go version | awk '{print $3}')" >> "$GITHUB_ENV"

      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-

      - name: Init Kind
        run: |
          sudo pip3 install j2cli
          sudo pip3 install "j2cli[yaml]"
          sudo PATH=~/.local/bin:$PATH make kind-init

      - name: Install Kube-OVN
        run: sudo make kind-install

      - name: Run E2E
        run: |
          go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo
          sudo kubectl cluster-info
          sudo cp -r /root/.kube/ /home/runner/.kube/
          sudo chmod -R 777 /home/runner/.kube/
          make e2e

      - name: Cleanup
        run: |
          sh -c 'while :; do if [ $(kubectl get --no-headers subnet | wc -l) -eq 2 ]; then break; fi; sleep 5; done'
          sh dist/images/cleanup.sh

  single-helm-e2e:
    needs: build-kube-ovn
    name: 1-master-helm-e2e
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3

      - name: Install Kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Load Image
        run: |
          docker load --input kube-ovn.tar

      - uses: actions/setup-go@v3
        with:
          go-version: '${{ env.GO_VERSION }}'
          check-latest: true
        id: go

      - name: Export Go full version
        run: |
          echo "GO_FULL_VER=$(go version | awk '{print $3}')" >> "$GITHUB_ENV"

      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-

      - name: Init Kind
        run: |
          sudo pip3 install j2cli
          sudo pip3 install "j2cli[yaml]"
          sudo PATH=~/.local/bin:$PATH make kind-init

      - name: Install Kube-OVN
        run: |
          docker load --input kube-ovn.tar
          sudo cp -r /root/.kube/ /home/runner/.kube/
          sudo chmod -R 777 /home/runner/.kube/
          sudo make kind-helm-install
          kubectl rollout status deployment/ovn-central -n kube-system --timeout 300s
          kubectl rollout status deployment/kube-ovn-controller -n kube-system --timeout 300s
          kubectl rollout status daemonset/kube-ovn-cni -n kube-system --timeout 300s

      - name: Copy Kubelet-ko
        run: |
          sh -c '
            set -e
            kubectl -n kube-system get pods --no-headers | grep kube-ovn-controller | awk "{print \$1}" | while read pod; do
              sudo kubectl -n kube-system cp $pod:/kube-ovn/kubectl-ko  /usr/bin/kubectl-ko
            done
            sudo chmod +x /usr/bin/kubectl-ko
          '

      - name: Run E2E
        run: |
          go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo
          sudo kubectl cluster-info
          sudo cp -r /root/.kube/ /home/runner/.kube/
          sudo chmod -R 777 /home/runner/.kube/
          make e2e

      - name: Cleanup
        run: |
          sh -c 'while :; do if [ $(kubectl get --no-headers subnet | wc -l) -eq 2 ]; then break; fi; sleep 5; done'
          sh dist/images/cleanup.sh

  single-iptables-e2e:
    needs: build-kube-ovn
    name: 1-master-iptables-e2e
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3

      - name: Install Kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Load Image
        run: |
          docker load --input kube-ovn.tar

      - uses: actions/setup-go@v3
        with:
          go-version: '${{ env.GO_VERSION }}'
          check-latest: true
        id: go

      - name: Export Go full version
        run: |
          echo "GO_FULL_VER=$(go version | awk '{print $3}')" >> "$GITHUB_ENV"

      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-

      - name: Init Kind
        run: |
          sudo pip3 install j2cli
          sudo pip3 install "j2cli[yaml]"
          sudo PATH=~/.local/bin:$PATH make kind-init-iptables

      - name: Install Kube-OVN
        run: sudo make kind-install

      - name: Run E2E
        run: |
          go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo
          sudo kubectl cluster-info
          sudo cp -r /root/.kube/ /home/runner/.kube/
          sudo chmod -R 777 /home/runner/.kube/
          make e2e

      - name: Cleanup
        run: |
          sh -c 'while :; do if [ $(kubectl get --no-headers subnet | wc -l) -eq 2 ]; then break; fi; sleep 5; done'
          sh dist/images/cleanup.sh

  single-vlan-e2e:
    needs: build-kube-ovn
    name: 1-master-vlan-e2e
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3

      - name: Install Kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Load Image
        run: |
          docker load --input kube-ovn.tar

      - uses: actions/setup-go@v3
        with:
          go-version: '${{ env.GO_VERSION }}'
          check-latest: true
        id: go

      - name: Export Go full version
        run: |
          echo "GO_FULL_VER=$(go version | awk '{print $3}')" >> "$GITHUB_ENV"

      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-

      - name: Init Kind
        run: |
          sudo pip3 install j2cli
          sudo pip3 install "j2cli[yaml]"
          sudo PATH=~/.local/bin:$PATH make kind-init

      - name: Install Kube-OVN
        run: sudo make kind-install

      - name: Run E2E
        run: |
          go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo
          sudo kubectl cluster-info
          sudo cp -r /root/.kube/ /home/runner/.kube/
          sudo chmod -R 777 /home/runner/.kube/
          make e2e-vlan

      - name: Cleanup
        run: |
          sh -c 'while :; do if [ $(kubectl get --no-headers subnet | wc -l) -eq 2 ]; then break; fi; sleep 5; done'
          sh dist/images/cleanup.sh

  single-underlay-e2e-single-nic:
    needs: build-kube-ovn
    name: 1-master-underlay-e2e-single-nic
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3

      - name: Install Kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Load Image
        run: |
          docker load --input kube-ovn.tar

      - uses: actions/setup-go@v3
        with:
          go-version: '${{ env.GO_VERSION }}'
          check-latest: true
        id: go

      - name: Export Go full version
        run: |
          echo "GO_FULL_VER=$(go version | awk '{print $3}')" >> "$GITHUB_ENV"

      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-

      - name: Init Kind
        run: |
          sudo pip3 install j2cli
          sudo pip3 install "j2cli[yaml]"
          sudo PATH=~/.local/bin:$PATH make kind-init

      - name: Install Kube-OVN
        run: sudo make kind-install-underlay

      - name: Run E2E
        run: |
          go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo
          sudo kubectl cluster-info
          sudo cp -r /root/.kube/ /home/runner/.kube/
          sudo chmod -R 777 /home/runner/.kube/
          make e2e-underlay-single-nic

      - name: Run networkpolicy E2E
        working-directory: test/networkpolicy-cyclonus/
        run: |
          sudo cp -r /root/.kube/ /home/runner/.kube/
          sudo chmod -R 777 /home/runner/.kube/
          bash ./start-test.sh

      - name: Cleanup
        run: |
          sh -c 'while :; do if [ $(kubectl get --no-headers subnet | wc -l) -eq 2 ]; then break; fi; sleep 5; done'
          sh dist/images/cleanup.sh

      - name: Check Node Network
        run: |
          sh -c '
            set -e
            kubectl get no --no-headers | awk "{print \$1}" | while read node; do
              docker inspect $node -f "{{.NetworkSettings.Networks.kind.IPAddress}}"
            done | while read ip; do
              docker run --rm --network kind kubeovn/kube-ovn:$(cat VERSION) ping -c1 -w1 $ip
            done
            kubectl get no --no-headers | awk "{print \$1}" | while read node; do
              docker inspect $node -f "{{.NetworkSettings.Networks.kind.GlobalIPv6Address}}"
            done | while read ip; do
              docker run --rm --network kind kubeovn/kube-ovn:$(cat VERSION) ping6 -c1 -w1 $ip
            done
          '

  single-node-e2e:
    needs: build-kube-ovn
    name: 1-node-e2e
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3

      - name: Install Kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Load Image
        run: |
          docker load --input kube-ovn.tar

      - uses: actions/setup-go@v3
        with:
          go-version: '${{ env.GO_VERSION }}'
          check-latest: true
        id: go

      - name: Export Go full version
        run: |
          echo "GO_FULL_VER=$(go version | awk '{print $3}')" >> "$GITHUB_ENV"

      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-

      - name: Init Kind
        run: |
          sudo pip3 install j2cli
          sudo pip3 install "j2cli[yaml]"
          sudo PATH=~/.local/bin:$PATH make kind-init-single

      - name: Install Kube-OVN
        run: sudo make kind-install

      - name: Run E2E
        run: |
          go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo
          sudo kubectl cluster-info
          sudo cp -r /root/.kube/ /home/runner/.kube/
          sudo chmod -R 777 /home/runner/.kube/
          make e2e

      - name: Cleanup
        run: |
          sh -c 'while :; do if [ $(kubectl get --no-headers subnet | wc -l) -eq 2 ]; then break; fi; sleep 5; done'
          sh dist/images/cleanup.sh

  ha-e2e:
    needs: build-kube-ovn
    name: ha-e2e
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3

      - name: Install Kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Load Image
        run: |
          docker load --input kube-ovn.tar

      - uses: actions/setup-go@v3
        with:
          go-version: '${{ env.GO_VERSION }}'
          check-latest: true
        id: go

      - name: Export Go full version
        run: |
          echo "GO_FULL_VER=$(go version | awk '{print $3}')" >> "$GITHUB_ENV"

      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-

      - name: Init Kind
        run: |
          sudo pip3 install j2cli
          sudo pip3 install "j2cli[yaml]"
          sudo PATH=~/.local/bin:$PATH make kind-init-ha

      - name: Install Kube-OVN
        run: |
          sudo make kind-install
          sudo kubectl patch subnet ovn-default --type merge \
            -p '{"spec":{"gatewayType": "centralized", "gatewayNode": "kube-ovn-control-plane"}}'
          sudo kubectl -n kube-system patch svc kube-ovn-pinger --type merge \
            -p '{"spec":{"type": "NodePort", "externalTrafficPolicy": "Local"}}'

      - name: Run E2E
        run: |
          go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo
          sudo kubectl cluster-info
          sudo cp -r /root/.kube/ /home/runner/.kube/
          sudo chmod -R 777 /home/runner/.kube/
          make e2e

      - name: Run networkpolicy E2E
        working-directory: test/networkpolicy-cyclonus/
        run: |
          sudo cp -r /root/.kube/ /home/runner/.kube/
          sudo chmod -R 777 /home/runner/.kube/
          bash ./start-test.sh

      - name: Cleanup
        run: |
          sh -c 'while :; do if [ $(kubectl get --no-headers subnet | wc -l) -eq 2 ]; then break; fi; sleep 5; done'
          sh dist/images/cleanup.sh

  ipv6-e2e:
    needs: build-kube-ovn
    name: ipv6-e2e
    runs-on: ubuntu-22.04
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v3

      - name: Install Kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Load Image
        run: |
          docker load --input kube-ovn.tar

      - uses: actions/setup-go@v3
        with:
          go-version: '${{ env.GO_VERSION }}'
          check-latest: true
        id: go

      - name: Export Go full version
        run: |
          echo "GO_FULL_VER=$(go version | awk '{print $3}')" >> "$GITHUB_ENV"

      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-

      - name: Init Kind
        run: |
          sudo pip3 install j2cli
          sudo pip3 install "j2cli[yaml]"
          sudo PATH=~/.local/bin:$PATH make kind-init-ipv6

      - name: Install Kube-OVN
        run: sudo make kind-install-ipv6

      - name: Run E2E
        run: |
          go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo
          sudo kubectl cluster-info
          sudo cp -r /root/.kube/ /home/runner/.kube/
          sudo chmod -R 777 /home/runner/.kube/
          make e2e-ipv6

      - name: Run networkpolicy E2E
        working-directory: test/networkpolicy-cyclonus/
        run: |
          sudo cp -r /root/.kube/ /home/runner/.kube/
          sudo chmod -R 777 /home/runner/.kube/
          bash ./start-test.sh

      - name: Cleanup
        run: |
          sh -c 'while :; do if [ $(kubectl get --no-headers subnet | wc -l) -eq 2 ]; then break; fi; sleep 5; done'
          sh dist/images/cleanup.sh

  ipv6-vlan-e2e:
    needs: build-kube-ovn
    name: ipv6-vlan-e2e
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3

      - name: Install Kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Load Image
        run: |
          docker load --input kube-ovn.tar

      - uses: actions/setup-go@v3
        with:
          go-version: '${{ env.GO_VERSION }}'
          check-latest: true
        id: go

      - name: Export Go full version
        run: |
          echo "GO_FULL_VER=$(go version | awk '{print $3}')" >> "$GITHUB_ENV"

      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-

      - name: Init Kind
        run: |
          sudo pip3 install j2cli
          sudo pip3 install "j2cli[yaml]"
          sudo PATH=~/.local/bin:$PATH make kind-init-ipv6

      - name: Install Kube-OVN
        run: sudo make kind-install-ipv6

      - name: Run E2E
        run: |
          go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo
          sudo kubectl cluster-info
          sudo cp -r /root/.kube/ /home/runner/.kube/
          sudo chmod -R 777 /home/runner/.kube/
          make e2e-vlan-ipv6

      - name: Cleanup
        run: |
          sh -c 'while :; do if [ $(kubectl get --no-headers subnet | wc -l) -eq 2 ]; then break; fi; sleep 5; done'
          sh dist/images/cleanup.sh

  ipv6-underlay-e2e-single-nic:
    needs: build-kube-ovn
    name: ipv6-underlay-e2e-single-nic
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3

      - name: Install Kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Load Image
        run: |
          docker load --input kube-ovn.tar

      - uses: actions/setup-go@v3
        with:
          go-version: '${{ env.GO_VERSION }}'
          check-latest: true
        id: go

      - name: Export Go full version
        run: |
          echo "GO_FULL_VER=$(go version | awk '{print $3}')" >> "$GITHUB_ENV"

      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-

      - name: Init Kind
        run: |
          sudo pip3 install j2cli
          sudo pip3 install "j2cli[yaml]"
          sudo PATH=~/.local/bin:$PATH make kind-init-ipv6

      - name: Install Kube-OVN
        run: sudo make kind-install-underlay-ipv6

      - name: Run E2E
        run: |
          go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo
          sudo kubectl cluster-info
          sudo cp -r /root/.kube/ /home/runner/.kube/
          sudo chmod -R 777 /home/runner/.kube/
          make e2e-underlay-single-nic

      - name: Run networkpolicy E2E
        working-directory: test/networkpolicy-cyclonus/
        run: |
          sudo cp -r /root/.kube/ /home/runner/.kube/
          sudo chmod -R 777 /home/runner/.kube/
          bash ./start-test.sh

      - name: Cleanup
        run: |
          sh -c 'while :; do if [ $(kubectl get --no-headers subnet | wc -l) -eq 2 ]; then break; fi; sleep 5; done'
          sh dist/images/cleanup.sh

      - name: Check Node Network
        run: |
          sh -c '
            set -e
            kubectl get no --no-headers | awk "{print \$1}" | while read node; do
              docker inspect $node -f "{{.NetworkSettings.Networks.kind.IPAddress}}"
            done | while read ip; do
              docker run --rm --network kind kubeovn/kube-ovn:$(cat VERSION) ping -c1 -w1 $ip
            done
            kubectl get no --no-headers | awk "{print \$1}" | while read node; do
              docker inspect $node -f "{{.NetworkSettings.Networks.kind.GlobalIPv6Address}}"
            done | while read ip; do
              docker run --rm --network kind kubeovn/kube-ovn:$(cat VERSION) ping6 -c1 -w1 $ip
            done
          '

  dual-stack-e2e:
    needs: build-kube-ovn
    name: dual-stack-e2e
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3

      - name: Install Kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Load Image
        run: |
          docker load --input kube-ovn.tar

      - uses: actions/setup-go@v3
        with:
          go-version: '${{ env.GO_VERSION }}'
          check-latest: true
        id: go

      - name: Export Go full version
        run: |
          echo "GO_FULL_VER=$(go version | awk '{print $3}')" >> "$GITHUB_ENV"

      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-

      - name: Init Kind
        run: |
          sudo pip3 install j2cli
          sudo pip3 install "j2cli[yaml]"
          sudo PATH=~/.local/bin:$PATH make kind-init-dual

      - name: Install Kube-OVN
        run: sudo make kind-install-dual

      - name: Run E2E
        run: |
          go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo
          sudo kubectl cluster-info
          sudo cp -r /root/.kube/ /home/runner/.kube/
          sudo chmod -R 777 /home/runner/.kube/
          make e2e

      - name: Run networkpolicy E2E
        working-directory: test/networkpolicy-cyclonus/
        run: |
          sudo cp -r /root/.kube/ /home/runner/.kube/
          sudo chmod -R 777 /home/runner/.kube/
          bash ./start-test.sh

      - name: Cleanup
        run: |
          sh -c 'while :; do if [ $(kubectl get --no-headers subnet | wc -l) -eq 2 ]; then break; fi; sleep 5; done'
          sh dist/images/cleanup.sh

  dual-stack-underlay-e2e-single-nic:
    needs: build-kube-ovn
    name: dual-stack-underlay-e2e-single-nic
    runs-on: ubuntu-22.04
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v3

      - name: Install Kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Load Image
        run: |
          docker load --input kube-ovn.tar

      - uses: actions/setup-go@v3
        with:
          go-version: '${{ env.GO_VERSION }}'
          check-latest: true
        id: go

      - name: Export Go full version
        run: |
          echo "GO_FULL_VER=$(go version | awk '{print $3}')" >> "$GITHUB_ENV"

      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-

      - name: Init Kind
        run: |
          sudo pip3 install j2cli
          sudo pip3 install "j2cli[yaml]"
          sudo PATH=~/.local/bin:$PATH make kind-init-dual

      - name: Install Kube-OVN
        run: sudo make kind-install-underlay-dual

      - name: Run E2E
        run: |
          go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo
          sudo kubectl cluster-info
          sudo cp -r /root/.kube/ /home/runner/.kube/
          sudo chmod -R 777 /home/runner/.kube/
          make e2e-underlay-single-nic

      - name: Run networkpolicy E2E
        working-directory: test/networkpolicy-cyclonus/
        run: |
          sudo cp -r /root/.kube/ /home/runner/.kube/
          sudo chmod -R 777 /home/runner/.kube/
          bash ./start-test.sh

      - name: Cleanup
        run: |
          sh -c 'while :; do if [ $(kubectl get --no-headers subnet | wc -l) -eq 2 ]; then break; fi; sleep 5; done'
          sh dist/images/cleanup.sh

      - name: Check Node Network
        run: |
          sh -c '
            set -e
            kubectl get no --no-headers | awk "{print \$1}" | while read node; do
              docker inspect $node -f "{{.NetworkSettings.Networks.kind.IPAddress}}"
            done | while read ip; do
              docker run --rm --network kind kubeovn/kube-ovn:$(cat VERSION) ping -c1 -w1 $ip
            done
            kubectl get no --no-headers | awk "{print \$1}" | while read node; do
              docker inspect $node -f "{{.NetworkSettings.Networks.kind.GlobalIPv6Address}}"
            done | while read ip; do
              docker run --rm --network kind kubeovn/kube-ovn:$(cat VERSION) ping6 -c1 -w1 $ip
            done
          '
        
  dual-stack-underlay-hairpin-e2e-single-nic:
    needs: build-kube-ovn
    name: dual-stack-underlay-hairpin-e2e-single-nic
    runs-on: ubuntu-22.04
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v3

      - name: Install Kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Load Image
        run: |
          docker load --input kube-ovn.tar

      - uses: actions/setup-go@v3
        with:
          go-version: '${{ env.GO_VERSION }}'
          check-latest: true
        id: go

      - name: Export Go full version
        run: |
          echo "GO_FULL_VER=$(go version | awk '{print $3}')" >> "$GITHUB_ENV"

      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-

      - name: Init Kind
        run: |
          sudo pip3 install j2cli
          sudo pip3 install "j2cli[yaml]"
          sudo PATH=~/.local/bin:$PATH make kind-init-dual

      - name: Install Kube-OVN
        run: sudo make kind-install-underlay-hairpin-dual

      - name: Run E2E
        run: |
          go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo
          sudo kubectl cluster-info
          sudo cp -r /root/.kube/ /home/runner/.kube/
          sudo chmod -R 777 /home/runner/.kube/
          make e2e-underlay-single-nic

  dual-stack-underlay-logical-gw-e2e:
    needs: build-kube-ovn
    name: dual-stack-underlay-logical-gateway-e2e
    runs-on: ubuntu-22.04
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v3

      - name: Install Kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Load Image
        run: |
          docker load --input kube-ovn.tar

      - uses: actions/setup-go@v3
        with:
          go-version: '${{ env.GO_VERSION }}'
          check-latest: true
        id: go

      - name: Export Go full version
        run: |
          echo "GO_FULL_VER=$(go version | awk '{print $3}')" >> "$GITHUB_ENV"

      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-

      - name: Init Kind
        run: |
          sudo pip3 install j2cli
          sudo pip3 install "j2cli[yaml]"
          sudo PATH=~/.local/bin:$PATH make kind-init-dual

      - name: Install Kube-OVN
        run: sudo make kind-install-underlay-logical-gateway-dual

      - name: Run E2E
        run: |
          go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo
          sudo kubectl cluster-info
          sudo cp -r /root/.kube/ /home/runner/.kube/
          sudo chmod -R 777 /home/runner/.kube/
          make e2e

      - name: Run networkpolicy E2E
        working-directory: test/networkpolicy-cyclonus/
        run: |
          sudo cp -r /root/.kube/ /home/runner/.kube/
          sudo chmod -R 777 /home/runner/.kube/
          bash ./start-test.sh

      - name: Cleanup
        run: |
          sh -c 'while :; do if [ $(kubectl get --no-headers subnet | wc -l) -eq 2 ]; then break; fi; sleep 5; done'
          sh dist/images/cleanup.sh

      - name: Check Node Network
        run: |
          sh -c '
            set -e
            kubectl get no --no-headers | awk "{print \$1}" | while read node; do
              docker inspect $node -f "{{.NetworkSettings.Networks.kind.IPAddress}}"
            done | while read ip; do
              docker run --rm --network kind kubeovn/kube-ovn:$(cat VERSION) ping -c1 -w1 $ip
            done
            kubectl get no --no-headers | awk "{print \$1}" | while read node; do
              docker inspect $node -f "{{.NetworkSettings.Networks.kind.GlobalIPv6Address}}"
            done | while read ip; do
              docker run --rm --network kind kubeovn/kube-ovn:$(cat VERSION) ping6 -c1 -w1 $ip
            done
          '

  no-lb-e2e:
    needs: build-kube-ovn
    name: disable-loadbalancer-e2e
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3

      - name: Install Kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Load Image
        run: |
          docker load --input kube-ovn.tar

      - uses: actions/setup-go@v3
        with:
          go-version: '${{ env.GO_VERSION }}'
          check-latest: true
        id: go

      - name: Export Go full version
        run: |
          echo "GO_FULL_VER=$(go version | awk '{print $3}')" >> "$GITHUB_ENV"

      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-

      - name: Init Kind
        run: |
          sudo pip3 install j2cli
          sudo pip3 install "j2cli[yaml]"
          sudo PATH=~/.local/bin:$PATH make kind-init

      - name: Install Kube-OVN without LoadBalancer
        run: sudo ENABLE_LB=false make kind-install

      - name: Run E2E
        run: |
          go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo
          sudo kubectl cluster-info
          sudo cp -r /root/.kube/ /home/runner/.kube/
          sudo chmod -R 777 /home/runner/.kube/
          make e2e

      - name: Cleanup
        run: |
          sh -c 'while :; do if [ $(kubectl get --no-headers subnet | wc -l) -eq 2 ]; then break; fi; sleep 5; done'
          sh dist/images/cleanup.sh

  no-lb-iptables-e2e:
    needs: build-kube-ovn
    name: disable-loadbalancer-iptables-e2e
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3

      - name: Install Kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Load Image
        run: |
          docker load --input kube-ovn.tar

      - uses: actions/setup-go@v3
        with:
          go-version: '${{ env.GO_VERSION }}'
          check-latest: true
        id: go

      - name: Export Go full version
        run: |
          echo "GO_FULL_VER=$(go version | awk '{print $3}')" >> "$GITHUB_ENV"

      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-

      - name: Init Kind
        run: |
          sudo pip3 install j2cli
          sudo pip3 install "j2cli[yaml]"
          sudo PATH=~/.local/bin:$PATH make kind-init-iptables

      - name: Install Kube-OVN without LoadBalancer
        run: sudo ENABLE_LB=false make kind-install

      - name: Run E2E
        run: |
          go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo
          sudo kubectl cluster-info
          sudo cp -r /root/.kube/ /home/runner/.kube/
          sudo chmod -R 777 /home/runner/.kube/
          make e2e

      - name: Cleanup
        run: |
          sh -c 'while :; do if [ $(kubectl get --no-headers subnet | wc -l) -eq 2 ]; then break; fi; sleep 5; done'
          sh dist/images/cleanup.sh

  no-np-e2e:
    needs: build-kube-ovn
    name: disable-network-policy-e2e
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3

      - name: Install Kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Load Image
        run: |
          docker load --input kube-ovn.tar

      - uses: actions/setup-go@v3
        with:
          go-version: '${{ env.GO_VERSION }}'
          check-latest: true
        id: go

      - name: Export Go full version
        run: |
          echo "GO_FULL_VER=$(go version | awk '{print $3}')" >> "$GITHUB_ENV"

      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-

      - name: Init Kind
        run: |
          sudo pip3 install j2cli
          sudo pip3 install "j2cli[yaml]"
          sudo PATH=~/.local/bin:$PATH make kind-init

      - name: Install Kube-OVN
        run: sudo ENABLE_NP=false make kind-install

      - name: Run E2E
        run: |
          go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo
          sudo kubectl cluster-info
          sudo cp -r /root/.kube/ /home/runner/.kube/
          sudo chmod -R 777 /home/runner/.kube/
          make e2e

      - name: Cleanup
        run: |
          sh -c 'while :; do if [ $(kubectl get --no-headers subnet | wc -l) -eq 2 ]; then break; fi; sleep 5; done'
          sh dist/images/cleanup.sh

  multus-e2e:
    needs:
      - build-kube-ovn
      - build-vpc-nat-gateway
    name: multus-e2e
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3

      - name: Install Kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Load Image
        run: |
          docker load --input kube-ovn.tar

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: vpc-nat-gateway

      - name: Load Image
        run: |
          docker load --input vpc-nat-gateway.tar

      - uses: actions/setup-go@v3
        with:
          go-version: '${{ env.GO_VERSION }}'
          check-latest: true
        id: go

      - name: Export Go full version
        run: |
          echo "GO_FULL_VER=$(go version | awk '{print $3}')" >> "$GITHUB_ENV"

      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-

      - name: Init Kind
        run: |
          sudo pip3 install j2cli
          sudo pip3 install "j2cli[yaml]"
          sudo PATH=~/.local/bin:$PATH make kind-init

      - name: Install Kube-OVN & Multus
        run: sudo make kind-install-multus

      - name: Run E2E
        run: |
          go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo
          sudo kubectl cluster-info
          sudo cp -r /root/.kube/ /home/runner/.kube/
          sudo chmod -R 777 /home/runner/.kube/
          make e2e-multus

  ovn-ic-e2e:
    needs: build-kube-ovn
    name: 1-master-ovn-ic-e2e
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3

      - name: Install Kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Load Image
        run: |
          docker load --input kube-ovn.tar

      - uses: actions/setup-go@v3
        with:
          go-version: '${{ env.GO_VERSION }}'
          check-latest: true
        id: go

      - name: Export Go full version
        run: |
          echo "GO_FULL_VER=$(go version | awk '{print $3}')" >> "$GITHUB_ENV"

      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-

      - name: Init Kind
        run: |
          sudo pip3 install j2cli
          sudo pip3 install "j2cli[yaml]"
          sudo PATH=~/.local/bin:$PATH make kind-init-ovn-ic

      - name: Install Kube-OVN
        run: sudo PATH=~/.local/bin:$PATH make kind-install-ovn-ic

      - name: Run E2E
        run: |
          go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo
          sudo kubectl cluster-info
          sudo cp -r /root/.kube/ /home/runner/.kube/
          sudo chmod -R 777 /home/runner/.kube/
          make e2e-ovn-ic

      - name: Cleanup
        run: |
          sh -c 'while :; do if [ $(kubectl get --no-headers subnet | wc -l) -eq 2 ]; then break; fi; sleep 5; done'
          sh dist/images/cleanup.sh

  cilium-e2e:
    needs: build-kube-ovn
    name: 1-master-cilium-e2e
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3
      - uses: azure/setup-helm@v3
        with:
          version: '${{ env.HELM_VERSION }}'

      - name: Install Kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Load Image
        run: |
          docker load --input kube-ovn.tar

      - uses: actions/setup-go@v3
        with:
          go-version: '${{ env.GO_VERSION }}'
          check-latest: true
        id: go

      - name: Export Go full version
        run: |
          echo "GO_FULL_VER=$(go version | awk '{print $3}')" >> "$GITHUB_ENV"

      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-

      - name: Init Kind
        run: |
          sudo pip3 install j2cli
          sudo pip3 install "j2cli[yaml]"
          sudo PATH=~/.local/bin:$PATH make kind-init-cilium

      - name: Install Kube-OVN
        run: sudo PATH=~/.local/bin:$PATH make kind-install-cilium

      - name: Run E2E
        run: |
          go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo
          sudo kubectl cluster-info
          sudo cp -r /root/.kube/ /home/runner/.kube/
          sudo chmod -R 777 /home/runner/.kube/
          docker exec kube-ovn-control-plane bash -c "ls -al /etc/cni/net.d/"
          kubectl get pods -A
          make e2e-cilium
          make e2e

      - name: Cleanup
        run: |
          sudo sh dist/images/cleanup.sh

  installation-compatibility-e2e:
    needs: build-kube-ovn
    name: installation-compatibility-e2e
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3

      - name: Install Kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Load Image
        run: |
          docker load --input kube-ovn.tar

      - name: Init Kind
        run: |
          sudo pip3 install j2cli
          sudo pip3 install "j2cli[yaml]"
          sudo PATH=~/.local/bin:$PATH k8s_version=v1.23.13 make kind-init

      - name: Install Kube-OVN
        run: sudo PATH=~/.local/bin:$PATH make kind-install

      - name: Cleanup
        run: |
          sudo sh dist/images/cleanup.sh

  push:
    needs:
      - build-centos-compile
      - single-e2e
      - single-iptables-e2e
      - single-vlan-e2e
      - single-underlay-e2e-single-nic
      - single-node-e2e
      - ha-e2e
      - ipv6-e2e
      - ipv6-vlan-e2e
      - ipv6-underlay-e2e-single-nic
      - dual-stack-e2e
      - dual-stack-underlay-logical-gw-e2e
      - dual-stack-underlay-e2e-single-nic
      - dual-stack-underlay-hairpin-e2e-single-nic
      - no-lb-e2e
      - no-lb-iptables-e2e
      - no-np-e2e
      - multus-e2e
      - ovn-ic-e2e
      - cilium-e2e
      - installation-compatibility-e2e
    name: push
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - name: Download kube-ovn image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Download vpc-nat-gateway image
        uses: actions/download-artifact@v3
        with:
          name: vpc-nat-gateway

      - name: Download centos7-compile image
        uses: actions/download-artifact@v3
        with:
          name: centos7-compile

      # - name: Download centos8-compile image
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: centos8-compile

      - name: Load Image
        run: |
          docker load --input kube-ovn.tar
          docker load --input vpc-nat-gateway.tar
          docker load --input centos7-compile.tar
          # docker load --input centos8-compile.tar

      - name: Security Scan
        run: |
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy
          make scan

      - name: Push
        if: ${{ github.ref == 'refs/heads/master' || contains(github.ref, 'release') }}
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          COMMIT: ${{ github.sha }}
        run: |
          cat VERSION
          TAG=$(cat VERSION)
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker tag kubeovn/kube-ovn:$TAG kubeovn/kube-ovn-dev:$COMMIT-x86
          docker tag kubeovn/kube-ovn:$TAG kubeovn/kube-ovn:$TAG-x86
          docker tag kubeovn/vpc-nat-gateway:$TAG kubeovn/vpc-nat-gateway-dev:$COMMIT-x86
          docker tag kubeovn/vpc-nat-gateway:$TAG kubeovn/vpc-nat-gateway:$TAG-x86
          docker tag kubeovn/centos7-compile:$TAG kubeovn/centos7-compile-dev:$TAG-x86
          docker tag kubeovn/centos7-compile:$TAG kubeovn/centos7-compile:$TAG-x86
          # docker tag kubeovn/centos8-compile:$TAG kubeovn/centos8-compile-dev:$TAG-x86
          # docker tag kubeovn/centos8-compile:$TAG kubeovn/centos8-compile:$TAG-x86
          docker images
          docker push kubeovn/kube-ovn:$TAG-x86
          docker push kubeovn/kube-ovn:$TAG-no-avx512
          docker push kubeovn/kube-ovn-dev:$COMMIT-x86
          docker push kubeovn/vpc-nat-gateway:$TAG-x86
          docker push kubeovn/vpc-nat-gateway-dev:$COMMIT-x86
          docker push kubeovn/centos7-compile:$TAG-x86
          docker push kubeovn/centos7-compile-dev:$TAG-x86
          # docker push kubeovn/centos8-compile:$TAG-x86
          # docker push kubeovn/centos8-compile-dev:$TAG-x86
