name: Build x86 Image

on:
  pull_request:
    branches:
    - master
    - release-*
    paths-ignore:
    - 'docs/**'
    - '**.md'
  push:
    branches:
    - master
    - release-*
    paths-ignore:
    - 'docs/**'
    - '**.md'

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

env:
  GO_VERSION: '1.19'
  GOSEC_VERSION: '2.14.0'
  KIND_VERSION: v0.17.0
  HELM_VERSION: v3.10.1

jobs:
  build-kube-ovn-base:
    name: Build kube-ovn-base
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - uses: docker/setup-buildx-action@v2
        if: github.base_ref != null
      - name: Build
        run: |
          touch .CI_PASSED_VAR
          if git diff --name-only HEAD^ HEAD | grep -q ^dist/images/Dockerfile.base$; then
            echo "BUILD_BASE=1" > .CI_PASSED_VAR
            echo "BUILD_BASE=1" >> "$GITHUB_ENV"
            make base-amd64
            make base-tar-amd64
          fi
          if git diff --name-only HEAD^ HEAD | grep -q ^dist/images/Dockerfile.base-dpdk$; then
            make base-amd64-dpdk
          fi

      - name: Upload variable file to artifact
        uses: actions/upload-artifact@v3
        with:
          name: variables
          path: .CI_PASSED_VAR

      - name: Upload base images to artifact
        if: env.BUILD_BASE == 1
        uses: actions/upload-artifact@v3
        with:
          name: kube-ovn-base
          path: image-amd64.tar

  build-kube-ovn:
    name: Build kube-ovn
    runs-on: ubuntu-22.04
    needs:
    - build-kube-ovn-base
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: actions/setup-go@v3
        with:
          go-version: '${{ env.GO_VERSION }}'
          check-latest: true
        id: go

      - name: Export Go full version
        run: echo "GO_FULL_VER=$(go version | awk '{print $3}')" >> "$GITHUB_ENV"

      - name: Go cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-

      - name: Unit test
        run: |
          go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo
          make ut

      - name: Install gosec
        run: |
          curl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s -- -b $(go env GOPATH)/bin 'v${{ env.GOSEC_VERSION }}'

      - name: Download variable file
        uses: actions/download-artifact@v3
        with:
          name: variables

      - name: Export passed variables
        run: cat .CI_PASSED_VAR >> "$GITHUB_ENV"

      - name: Download base images
        if: env.BUILD_BASE == 1
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn-base

      - name: Load base images
        if: env.BUILD_BASE == 1
        run: docker load --input image-amd64.tar

      - name: Build
        run: |
          go mod tidy
          git diff --exit-code
          make lint
          if [ "x${{ env.BUILD_BASE }}" = "x1" ]; then
            TAG=$(cat VERSION)
            docker tag kubeovn/kube-ovn-base:$TAG-amd64 kubeovn/kube-ovn-base:$TAG
            docker tag kubeovn/kube-ovn-base:$TAG-amd64-no-avx512 kubeovn/kube-ovn-base:$TAG-no-avx512
            make build-kube-ovn
          else
            make image-kube-ovn
          fi
          make tar-kube-ovn

      - name: Upload images to artifact
        uses: actions/upload-artifact@v3
        with:
          name: kube-ovn
          path: kube-ovn.tar

  k8s-conformance-e2e:
    name: Kubernetes Conformance E2E
    needs: build-kube-ovn
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        index:
          - "1"
          - "2"
          - "3"
          - "4"
          - "5"
        ip-family:
          - dual
        mode:
          - underlay
    steps:
      - uses: actions/checkout@v3

      - name: Create the default branch directory
        run: mkdir -p test/e2e/source

      - name: Check out the default branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.repository.default_branch }}
          fetch-depth: 1
          path: test/e2e/source

      - name: Export E2E directory
        run: |
          if [ '${{ github.base_ref || github.ref_name }}' = '${{ github.event.repository.default_branch }}' ]; then
            echo "E2E_DIR=." >> "$GITHUB_ENV"
          else
            echo "E2E_DIR=test/e2e/source" >> "$GITHUB_ENV"
          fi

      - name: Remove DNS search domain
        run: |
          sudo sed -i '/^search/d' /etc/resolv.conf
          sudo systemctl restart docker

      - uses: actions/setup-go@v3
        with:
          go-version: '${{ env.GO_VERSION }}'
          check-latest: true
        id: go

      - name: Export Go full version
        run: echo "GO_FULL_VER=$(go version | awk '{print $3}')" >> "$GITHUB_ENV"

      - name: Go cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-e2e-${{ env.GO_FULL_VER }}-x86-${{ hashFiles('${{ env.E2E_DIR }}/**/go.sum') }}
          restore-keys: ${{ runner.os }}-e2e-${{ env.GO_FULL_VER }}-x86-

      - name: Build e2e binaries
        working-directory: ${{ env.E2E_DIR }}
        run: make e2e-compile

      - name: Install kind
        run: |
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Load image
        run: docker load --input kube-ovn.tar

      - name: Create kind cluster
        run: |
          sudo pip3 install j2cli
          sudo pip3 install "j2cli[yaml]"
          sudo PATH=~/.local/bin:$PATH make kind-init-${{ matrix.ip-family }}
          sudo cp -r /root/.kube/ ~/.kube/
          sudo chown -R $(id -un). ~/.kube/

      - name: Install Kube-OVN
        run: make kind-install-${{ matrix.mode }}-${{ matrix.ip-family }}

      - name: Run E2E
        working-directory: ${{ env.E2E_DIR }}
        env:
          E2E_BRANCH: ${{ matrix.branch }}
          E2E_IP_FAMILY: ${{ matrix.ip-family }}
          E2E_NETWORK_MODE: ${{ matrix.mode }}
        run: make k8s-conformance-e2e
