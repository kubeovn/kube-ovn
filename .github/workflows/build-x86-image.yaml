name: Build x86 Image

on:
  pull_request:
    branches:
    - master
    - release-*
    paths-ignore:
    - 'docs/**'
    - '**.md'
  push:
    branches:
    - master
    - release-*
    paths-ignore:
    - 'docs/**'
    - '**.md'

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

env:
  GOSEC_VERSION: '2.15.0'
  HELM_VERSION: v3.11.1

jobs:
  build-kube-ovn-base:
    name: Build kube-ovn-base
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - uses: docker/setup-buildx-action@v2
        if: github.base_ref != null
      - name: Build
        run: |
          touch .CI_PASSED_VAR
          if git diff --name-only HEAD^ HEAD | grep -q ^dist/images/Dockerfile.base$; then
            echo "BUILD_BASE=1" > .CI_PASSED_VAR
            echo "BUILD_BASE=1" >> "$GITHUB_ENV"
            make base-amd64
            make base-tar-amd64
          fi
          if git diff --name-only HEAD^ HEAD | grep -q ^dist/images/Dockerfile.base-dpdk$; then
            make base-amd64-dpdk
          fi

      - name: Upload variable file to artifact
        uses: actions/upload-artifact@v3
        with:
          name: variables
          path: .CI_PASSED_VAR

      - name: Upload base images to artifact
        if: env.BUILD_BASE == 1
        uses: actions/upload-artifact@v3
        with:
          name: kube-ovn-base
          path: image-amd64.tar

  build-kube-ovn:
    name: Build kube-ovn
    runs-on: ubuntu-22.04
    needs:
    - build-kube-ovn-base
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2
      - uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
          check-latest: true

      - name: Export Go full version
        run: echo "GO_FULL_VER=$(go version | awk '{print $3}')" >> "$GITHUB_ENV"

      - name: Go cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-${{ env.GO_FULL_VER }}-x86-

      - name: Unit test
        run: |
          go install -mod=mod github.com/onsi/ginkgo/v2/ginkgo
          make ut

      - name: Install gosec
        run: |
          tmp=$(mktemp -d)
          archive="gosec_${{ env.GOSEC_VERSION }}_$(go env GOHOSTOS)_$(go env GOHOSTARCH).tar.gz"
          wget -q -O "$tmp/$archive" https://github.com/securego/gosec/releases/download/v${{ env.GOSEC_VERSION }}/$archive
          tar --no-same-owner -C "$tmp" -xzf "$tmp/$archive"
          install "$tmp/gosec" /usr/local/bin
          rm -rf $tmp

      - name: Download variable file
        uses: actions/download-artifact@v3
        with:
          name: variables

      - name: Export passed variables
        run: cat .CI_PASSED_VAR >> "$GITHUB_ENV"

      - name: Download base images
        if: env.BUILD_BASE == 1
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn-base

      - name: Load base images
        if: env.BUILD_BASE == 1
        run: docker load --input image-amd64.tar

      - name: Build
        run: |
          go mod tidy
          git diff --exit-code
          make lint
          if [ "x${{ env.BUILD_BASE }}" = "x1" ]; then
            TAG=$(cat VERSION)
            docker tag kubeovn/kube-ovn-base:$TAG-amd64 kubeovn/kube-ovn-base:$TAG
            docker tag kubeovn/kube-ovn-base:$TAG-amd64-no-avx512 kubeovn/kube-ovn-base:$TAG-no-avx512
            make build-kube-ovn
          else
            make image-kube-ovn
          fi
          make tar-kube-ovn

      - name: Upload images to artifact
        uses: actions/upload-artifact@v3
        with:
          name: kube-ovn
          path: kube-ovn.tar

  build-vpc-nat-gateway:
    name: Build vpc-nat-gateway
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2

      - name: Build
        run: |
          make image-vpc-nat-gateway
          make tar-vpc-nat-gateway

      - name: Upload image to artifact
        uses: actions/upload-artifact@v3
        with:
          name: vpc-nat-gateway
          path: vpc-nat-gateway.tar

  build-centos-compile:
    name: Build centos-compile
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v2

      - name: Build
        run: |
          make image-centos-compile
          make tar-centos-compile

      - name: Upload centos7-compile image to artifact
        uses: actions/upload-artifact@v3
        with:
          name: centos7-compile
          path: centos7-compile.tar

      # - name: Upload centos8-compile image to artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: centos8-compile
      #     path: centos8-compile.tar

  build-e2e-binaries:
    name: Build E2E Binaries
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v3

      - name: Create the default branch directory
        if: (github.base_ref || github.ref_name) != github.event.repository.default_branch
        run: mkdir -p test/e2e/source

      - name: Check out the default branch
        if: (github.base_ref || github.ref_name) != github.event.repository.default_branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.repository.default_branch }}
          fetch-depth: 1
          path: test/e2e/source

      - name: Export E2E directory
        run: |
          if [ '${{ github.base_ref || github.ref_name }}' = '${{ github.event.repository.default_branch }}' ]; then
            echo "E2E_DIR=." >> "$GITHUB_ENV"
          else
            echo "E2E_DIR=test/e2e/source" >> "$GITHUB_ENV"
          fi

      - uses: actions/setup-go@v3
        with:
          go-version-file: ${{ env.E2E_DIR }}/go.mod
          check-latest: true

      - name: Export Go full version
        run: echo "GO_FULL_VER=$(go version | awk '{print $3}')" >> "$GITHUB_ENV"

      - name: Go cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-e2e-${{ env.GO_FULL_VER }}-x86-${{ hashFiles(format('{0}/**/go.sum', env.E2E_DIR)) }}
          restore-keys: ${{ runner.os }}-e2e-${{ env.GO_FULL_VER }}-x86-

      - name: Install ginkgo
        working-directory: ${{ env.E2E_DIR }}
        run: go install -v -mod=mod github.com/onsi/ginkgo/v2/ginkgo

      - run: make e2e-build
        working-directory: ${{ env.E2E_DIR }}

  netpol-path-filter:
    name: Network Policy Path Filter
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-22.04
    outputs:
      test-netpol: ${{ steps.filter.outputs.kube-ovn-controller }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
          check-latest: true

      - name: Generate path filter
        run: |
          filter=".github/path-filters.yaml"
          cat > $filter <<EOF
          kube-ovn-controller:
          - go.mod
          - go.sum
          EOF

          sh hack/go-list.sh pkg/controller | while read f; do
            echo "- $f" | tee -a $filter
          done

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          base: ${{ github.base_ref || github.ref_name }}
          filters: .github/path-filters.yaml
          list-files: csv

  k8s-conformance-e2e:
    name: Kubernetes Conformance E2E
    needs:
      - build-kube-ovn
      - build-e2e-binaries
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        ip-family:
          - ipv4
          - ipv6
          - dual
        mode:
          - overlay
          - underlay
    steps:
      - uses: actions/checkout@v3

      - name: Create the default branch directory
        if: (github.base_ref || github.ref_name) != github.event.repository.default_branch
        run: mkdir -p test/e2e/source

      - name: Check out the default branch
        if: (github.base_ref || github.ref_name) != github.event.repository.default_branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.repository.default_branch }}
          fetch-depth: 1
          path: test/e2e/source

      - name: Export E2E directory
        run: |
          if [ '${{ github.base_ref || github.ref_name }}' = '${{ github.event.repository.default_branch }}' ]; then
            echo "E2E_DIR=." >> "$GITHUB_ENV"
          else
            echo "E2E_DIR=test/e2e/source" >> "$GITHUB_ENV"
          fi

      - name: Remove DNS search domain
        run: |
          sudo sed -i '/^search/d' /etc/resolv.conf
          sudo systemctl restart docker

      - uses: actions/setup-go@v3
        with:
          go-version-file: ${{ env.E2E_DIR }}/go.mod
          check-latest: true

      - name: Export Go full version
        run: echo "GO_FULL_VER=$(go version | awk '{print $3}')" >> "$GITHUB_ENV"

      - name: Go cache
        uses: actions/cache/restore@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-e2e-${{ env.GO_FULL_VER }}-${{ hashFiles(format('{0}/**/go.sum', env.E2E_DIR)) }}
          restore-keys: ${{ runner.os }}-e2e-${{ env.GO_FULL_VER }}-x86-

      - name: Install kind
        uses: helm/kind-action@v1
        with:
          install_only: true

      - name: Install ginkgo
        working-directory: ${{ env.E2E_DIR }}
        run: go install -v -mod=mod github.com/onsi/ginkgo/v2/ginkgo

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Load image
        run: docker load --input kube-ovn.tar

      - name: Create kind cluster
        run: |
          sudo pip3 install j2cli
          sudo pip3 install "j2cli[yaml]"
          sudo PATH=~/.local/bin:$PATH make kind-init-${{ matrix.ip-family }}
          sudo cp -r /root/.kube/ ~/.kube/
          sudo chown -R $(id -un). ~/.kube/

      - name: Install Kube-OVN
        run: make kind-install-${{ matrix.mode }}-${{ matrix.ip-family }}

      - name: Run E2E
        working-directory: ${{ env.E2E_DIR }}
        env:
          E2E_BRANCH: ${{ github.base_ref || github.ref_name }}
          E2E_IP_FAMILY: ${{ matrix.ip-family }}
          E2E_NETWORK_MODE: ${{ matrix.mode }}
        run: make k8s-conformance-e2e

  k8s-netpol-e2e:
    name: Kubernetes Network Policy E2E
    if: |
      always() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') &&
      (needs.netpol-path-filter.outputs.test-netpol == 1 || contains(github.event.pull_request.labels.*.name, 'network policy'))
    needs:
      - build-kube-ovn
      - build-e2e-binaries
      - netpol-path-filter
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        ip-family:
          - ipv4
          - ipv6
          - dual
    steps:
      - uses: actions/checkout@v3

      - name: Create the default branch directory
        if: (github.base_ref || github.ref_name) != github.event.repository.default_branch
        run: mkdir -p test/e2e/source

      - name: Check out the default branch
        if: (github.base_ref || github.ref_name) != github.event.repository.default_branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.repository.default_branch }}
          fetch-depth: 1
          path: test/e2e/source

      - name: Export E2E directory
        run: |
          if [ '${{ github.base_ref || github.ref_name }}' = '${{ github.event.repository.default_branch }}' ]; then
            echo "E2E_DIR=." >> "$GITHUB_ENV"
          else
            echo "E2E_DIR=test/e2e/source" >> "$GITHUB_ENV"
          fi

      - name: Remove DNS search domain
        run: |
          sudo sed -i '/^search/d' /etc/resolv.conf
          sudo systemctl restart docker

      - uses: actions/setup-go@v3
        with:
          go-version-file: ${{ env.E2E_DIR }}/go.mod
          check-latest: true

      - name: Export Go full version
        run: echo "GO_FULL_VER=$(go version | awk '{print $3}')" >> "$GITHUB_ENV"

      - name: Go cache
        uses: actions/cache/restore@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-e2e-${{ env.GO_FULL_VER }}-x86-${{ hashFiles(format('{0}/**/go.sum', env.E2E_DIR)) }}
          restore-keys: ${{ runner.os }}-e2e-${{ env.GO_FULL_VER }}-x86-

      - name: Install kind
        uses: helm/kind-action@v1
        with:
          install_only: true

      - name: Install ginkgo
        working-directory: ${{ env.E2E_DIR }}
        run: go install -v -mod=mod github.com/onsi/ginkgo/v2/ginkgo

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Load image
        run: docker load --input kube-ovn.tar

      - name: Create kind cluster
        run: |
          sudo pip3 install j2cli
          sudo pip3 install "j2cli[yaml]"
          sudo PATH=~/.local/bin:$PATH make kind-init-${{ matrix.ip-family }}
          sudo cp -r /root/.kube/ ~/.kube/
          sudo chown -R $(id -un). ~/.kube/

      - name: Install Kube-OVN
        run: make kind-install-${{ matrix.ip-family }}

      - name: Run E2E
        working-directory: ${{ env.E2E_DIR }}
        run: make k8s-netpol-e2e

  k8s-netpol-legacy-e2e:
    name: Kubernetes Network Policy Legacy E2E
    if: |
      always() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') &&
      (needs.netpol-path-filter.outputs.test-netpol == 1 || contains(github.event.pull_request.labels.*.name, 'network policy'))
    needs:
      - build-kube-ovn
      - build-e2e-binaries
      - netpol-path-filter
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        ip-family:
          - ipv4
          - ipv6
          - dual
    steps:
      - uses: actions/checkout@v3

      - name: Create the default branch directory
        if: (github.base_ref || github.ref_name) != github.event.repository.default_branch
        run: mkdir -p test/e2e/source

      - name: Check out the default branch
        if: (github.base_ref || github.ref_name) != github.event.repository.default_branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.repository.default_branch }}
          fetch-depth: 1
          path: test/e2e/source

      - name: Export E2E directory
        run: |
          if [ '${{ github.base_ref || github.ref_name }}' = '${{ github.event.repository.default_branch }}' ]; then
            echo "E2E_DIR=." >> "$GITHUB_ENV"
          else
            echo "E2E_DIR=test/e2e/source" >> "$GITHUB_ENV"
          fi

      - name: Remove DNS search domain
        run: |
          sudo sed -i '/^search/d' /etc/resolv.conf
          sudo systemctl restart docker

      - uses: actions/setup-go@v3
        with:
          go-version-file: ${{ env.E2E_DIR }}/go.mod
          check-latest: true

      - name: Export Go full version
        run: echo "GO_FULL_VER=$(go version | awk '{print $3}')" >> "$GITHUB_ENV"

      - name: Go cache
        uses: actions/cache/restore@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-e2e-${{ env.GO_FULL_VER }}-x86-${{ hashFiles(format('{0}/**/go.sum', env.E2E_DIR)) }}
          restore-keys: ${{ runner.os }}-e2e-${{ env.GO_FULL_VER }}-x86-

      - name: Install kind
        uses: helm/kind-action@v1
        with:
          install_only: true

      - name: Install ginkgo
        working-directory: ${{ env.E2E_DIR }}
        run: go install -v -mod=mod github.com/onsi/ginkgo/v2/ginkgo

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Load image
        run: docker load --input kube-ovn.tar

      - name: Create kind cluster
        run: |
          sudo pip3 install j2cli
          sudo pip3 install "j2cli[yaml]"
          sudo PATH=~/.local/bin:$PATH make kind-init-${{ matrix.ip-family }}
          sudo cp -r /root/.kube/ ~/.kube/
          sudo chown -R $(id -un). ~/.kube/

      - name: Install Kube-OVN
        run: make kind-install-${{ matrix.ip-family }}

      - name: Run E2E
        working-directory: ${{ env.E2E_DIR }}
        run: make k8s-netpol-legacy-e2e

  cyclonus-netpol-e2e:
    name: Cyclonus Network Policy E2E
    if: |
      always() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') &&
      (needs.netpol-path-filter.outputs.test-netpol == 1 || contains(github.event.pull_request.labels.*.name, 'network policy'))
    needs:
      - build-kube-ovn
      - netpol-path-filter
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        ip-family:
          - ipv4
          - ipv6
          - dual
    steps:
      - uses: actions/checkout@v3

      - name: Create the default branch directory
        if: (github.base_ref || github.ref_name) != github.event.repository.default_branch
        run: mkdir -p test/e2e/source

      - name: Check out the default branch
        if: (github.base_ref || github.ref_name) != github.event.repository.default_branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.repository.default_branch }}
          fetch-depth: 1
          path: test/e2e/source

      - name: Export E2E directory
        run: |
          if [ '${{ github.base_ref || github.ref_name }}' = '${{ github.event.repository.default_branch }}' ]; then
            echo "E2E_DIR=." >> "$GITHUB_ENV"
          else
            echo "E2E_DIR=test/e2e/source" >> "$GITHUB_ENV"
          fi

      - name: Install kind
        uses: helm/kind-action@v1
        with:
          install_only: true

      - name: Install ginkgo
        working-directory: ${{ env.E2E_DIR }}
        run: go install -v -mod=mod github.com/onsi/ginkgo/v2/ginkgo

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Load image
        run: docker load --input kube-ovn.tar

      - name: Create kind cluster
        run: |
          sudo pip3 install j2cli
          sudo pip3 install "j2cli[yaml]"
          sudo PATH=~/.local/bin:$PATH make kind-init-${{ matrix.ip-family }}
          sudo cp -r /root/.kube/ ~/.kube/
          sudo chown -R $(id -un). ~/.kube/

      - name: Install Kube-OVN
        run: make kind-install-${{ matrix.ip-family }}

      - name: Run E2E
        working-directory: ${{ env.E2E_DIR }}
        run: make cyclonus-netpol-e2e

  kube-ovn-conformance-e2e:
    name: Kube-OVN Conformance E2E
    needs:
      - build-kube-ovn
      - build-e2e-binaries
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        ip-family:
          - ipv4
          - ipv6
          - dual
    steps:
      - uses: actions/checkout@v3

      - name: Create the default branch directory
        if: (github.base_ref || github.ref_name) != github.event.repository.default_branch
        run: mkdir -p test/e2e/source

      - name: Check out the default branch
        if: (github.base_ref || github.ref_name) != github.event.repository.default_branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.repository.default_branch }}
          fetch-depth: 1
          path: test/e2e/source

      - name: Export E2E directory
        run: |
          if [ '${{ github.base_ref || github.ref_name }}' = '${{ github.event.repository.default_branch }}' ]; then
            echo "E2E_DIR=." >> "$GITHUB_ENV"
          else
            echo "E2E_DIR=test/e2e/source" >> "$GITHUB_ENV"
          fi

      - uses: actions/setup-go@v3
        with:
          go-version-file: ${{ env.E2E_DIR }}/go.mod
          check-latest: true

      - name: Export Go full version
        run: echo "GO_FULL_VER=$(go version | awk '{print $3}')" >> "$GITHUB_ENV"

      - name: Go cache
        uses: actions/cache/restore@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-e2e-${{ env.GO_FULL_VER }}-x86-${{ hashFiles(format('{0}/**/go.sum', env.E2E_DIR)) }}
          restore-keys: ${{ runner.os }}-e2e-${{ env.GO_FULL_VER }}-x86-

      - name: Install kind
        uses: helm/kind-action@v1
        with:
          install_only: true

      - name: Install ginkgo
        working-directory: ${{ env.E2E_DIR }}
        run: go install -v -mod=mod github.com/onsi/ginkgo/v2/ginkgo

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Load image
        run: docker load --input kube-ovn.tar

      - name: Create kind cluster
        run: |
          sudo pip3 install j2cli
          sudo pip3 install "j2cli[yaml]"
          sudo PATH=~/.local/bin:$PATH make kind-init-${{ matrix.ip-family }}
          sudo cp -r /root/.kube/ ~/.kube/
          sudo chown -R $(id -un). ~/.kube/

      - name: Install Kube-OVN
        run: make kind-install-${{ matrix.ip-family }}

      - name: Run E2E
        working-directory: ${{ env.E2E_DIR }}
        env:
          E2E_BRANCH: ${{ github.base_ref || github.ref_name }}
          E2E_IP_FAMILY: ${{ matrix.ip-family }}
        run: make kube-ovn-conformance-e2e

      - name: Cleanup
        run: sh dist/images/cleanup.sh

  kube-ovn-ic-conformance-e2e:
    name: Kube-OVN IC Conformance E2E
    needs:
      - build-kube-ovn
      - build-e2e-binaries
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3

      - name: Create the default branch directory
        if: (github.base_ref || github.ref_name) != github.event.repository.default_branch
        run: mkdir -p test/e2e/source

      - name: Check out the default branch
        if: (github.base_ref || github.ref_name) != github.event.repository.default_branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.repository.default_branch }}
          fetch-depth: 1
          path: test/e2e/source

      - name: Export E2E directory
        run: |
          if [ '${{ github.base_ref || github.ref_name }}' = '${{ github.event.repository.default_branch }}' ]; then
            echo "E2E_DIR=." >> "$GITHUB_ENV"
          else
            echo "E2E_DIR=test/e2e/source" >> "$GITHUB_ENV"
          fi

      - uses: actions/setup-go@v3
        with:
          go-version-file: ${{ env.E2E_DIR }}/go.mod
          check-latest: true

      - name: Export Go full version
        run: echo "GO_FULL_VER=$(go version | awk '{print $3}')" >> "$GITHUB_ENV"

      - name: Go cache
        uses: actions/cache/restore@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-e2e-${{ env.GO_FULL_VER }}-x86-${{ hashFiles(format('{0}/**/go.sum', env.E2E_DIR)) }}
          restore-keys: ${{ runner.os }}-e2e-${{ env.GO_FULL_VER }}-x86-

      - name: Install kind
        uses: helm/kind-action@v1
        with:
          install_only: true

      - name: Install ginkgo
        working-directory: ${{ env.E2E_DIR }}
        run: go install -v -mod=mod github.com/onsi/ginkgo/v2/ginkgo

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Load image
        run: docker load --input kube-ovn.tar

      - name: Create kind clusters
        run: |
          sudo pip3 install j2cli
          sudo pip3 install "j2cli[yaml]"
          sudo PATH=~/.local/bin:$PATH make kind-init-ovn-ic
          sudo cp -r /root/.kube/ ~/.kube/
          sudo chown -R $(id -un). ~/.kube/

      - name: Install Kube-OVN
        run: make kind-install-ovn-ic

      - name: Run E2E
        working-directory: ${{ env.E2E_DIR }}
        run: make kube-ovn-ic-conformance-e2e

  chart-installation-test:
    name: Chart Installation Test
    needs: build-kube-ovn
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3

      - name: Install kind
        uses: helm/kind-action@v1
        with:
          install_only: true

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Load image
        run: docker load --input kube-ovn.tar

      - name: Create kind cluster
        run: |
          sudo pip3 install j2cli
          sudo pip3 install "j2cli[yaml]"
          sudo PATH=~/.local/bin:$PATH make kind-init
          sudo cp -r /root/.kube/ ~/.kube/
          sudo chown -R $(id -un). ~/.kube/

      - name: Install Kube-OVN
        run: make kind-install-chart

      - name: Cleanup
        run: sh dist/images/cleanup.sh

  underlay-logical-gateway-installation-test:
    name: Underlay Logical Gateway Installation Test
    needs: build-kube-ovn
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3

      - name: Install kind
        uses: helm/kind-action@v1
        with:
          install_only: true

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Load image
        run: docker load --input kube-ovn.tar

      - name: Create kind cluster
        run: |
          sudo pip3 install j2cli
          sudo pip3 install "j2cli[yaml]"
          sudo PATH=~/.local/bin:$PATH make kind-init-dual
          sudo cp -r /root/.kube/ ~/.kube/
          sudo chown -R $(id -un). ~/.kube/

      - name: Install Kube-OVN
        run: make kind-install-underlay-logical-gateway-dual

      - name: Cleanup
        run: sh dist/images/cleanup.sh

  no-ovn-lb-test:
    name: Disable OVN LB Test
    needs: build-kube-ovn
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3

      - name: Install kind
        uses: helm/kind-action@v1
        with:
          install_only: true

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Load image
        run: docker load --input kube-ovn.tar

      - name: Create kind cluster
        run: |
          sudo pip3 install j2cli
          sudo pip3 install "j2cli[yaml]"
          sudo PATH=~/.local/bin:$PATH make kind-init
          sudo cp -r /root/.kube/ ~/.kube/
          sudo chown -R $(id -un). ~/.kube/

      - name: Install Kube-OVN without LoadBalancer
        env:
          ENABLE_LB: "false"
        run: make kind-install

      - name: Cleanup
        run: sh dist/images/cleanup.sh

  no-np-test:
    name: Disable Network Policy Test
    needs: build-kube-ovn
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3

      - name: Install kind
        uses: helm/kind-action@v1
        with:
          install_only: true

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Load image
        run: docker load --input kube-ovn.tar

      - name: Create kind cluster
        run: |
          sudo pip3 install j2cli
          sudo pip3 install "j2cli[yaml]"
          sudo PATH=~/.local/bin:$PATH make kind-init
          sudo cp -r /root/.kube/ ~/.kube/
          sudo chown -R $(id -un). ~/.kube/

      - name: Install Kube-OVN
        env:
          ENABLE_NP: "false"
        run: make kind-install

      - name: Cleanup
        run: sh dist/images/cleanup.sh

  lb-svc-e2e:
    name: LB Service E2E
    needs:
      - build-kube-ovn
      - build-vpc-nat-gateway
      - build-e2e-binaries
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3

      - name: Create the default branch directory
        if: (github.base_ref || github.ref_name) != github.event.repository.default_branch
        run: mkdir -p test/e2e/source

      - name: Check out the default branch
        if: (github.base_ref || github.ref_name) != github.event.repository.default_branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.repository.default_branch }}
          fetch-depth: 1
          path: test/e2e/source

      - name: Export E2E directory
        run: |
          if [ '${{ github.base_ref || github.ref_name }}' = '${{ github.event.repository.default_branch }}' ]; then
            echo "E2E_DIR=." >> "$GITHUB_ENV"
          else
            echo "E2E_DIR=test/e2e/source" >> "$GITHUB_ENV"
          fi

      - uses: actions/setup-go@v3
        with:
          go-version-file: ${{ env.E2E_DIR }}/go.mod
          check-latest: true

      - name: Export Go full version
        run: echo "GO_FULL_VER=$(go version | awk '{print $3}')" >> "$GITHUB_ENV"

      - name: Go cache
        uses: actions/cache/restore@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-e2e-${{ env.GO_FULL_VER }}-x86-${{ hashFiles(format('{0}/**/go.sum', env.E2E_DIR)) }}
          restore-keys: ${{ runner.os }}-e2e-${{ env.GO_FULL_VER }}-x86-

      - name: Install kind
        uses: helm/kind-action@v1
        with:
          install_only: true

      - name: Install ginkgo
        working-directory: ${{ env.E2E_DIR }}
        run: go install -v -mod=mod github.com/onsi/ginkgo/v2/ginkgo

      - name: Download kube-ovn image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Download vpc-nat-gateway image
        uses: actions/download-artifact@v3
        with:
          name: vpc-nat-gateway

      - name: Load images
        run: |
          docker load -i kube-ovn.tar
          docker load -i vpc-nat-gateway.tar

      - name: Create kind cluster
        run: |
          sudo pip3 install j2cli
          sudo pip3 install "j2cli[yaml]"
          sudo PATH=~/.local/bin:$PATH make kind-init
          sudo cp -r /root/.kube/ ~/.kube/
          sudo chown -R $(id -un). ~/.kube/

      - name: Install Multus and Kube-OVN
        run: make kind-install-lb-svc

      - name: Run E2E
        working-directory: ${{ env.E2E_DIR }}
        run: make kube-ovn-lb-svc-conformance-e2e

  installation-compatibility-test:
    name: Installation Compatibility Test
    needs: build-kube-ovn
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3

      - name: Install kind
        uses: helm/kind-action@v1
        with:
          install_only: true

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Load image
        run: docker load --input kube-ovn.tar

      - name: Create kind cluster
        run: |
          sudo pip3 install j2cli
          sudo pip3 install "j2cli[yaml]"
          sudo PATH=~/.local/bin:$PATH k8s_version=v1.23.13 make kind-init
          sudo cp -r /root/.kube/ ~/.kube/
          sudo chown -R $(id -un). ~/.kube/

      - name: Install Kube-OVN
        run: make kind-install

      - name: Cleanup
        run: sh dist/images/cleanup.sh

  cilium-chaining-e2e:
    name: Cilium Chaining E2E
    needs:
      - build-kube-ovn
      - build-e2e-binaries
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v3
      - uses: azure/setup-helm@v3
        with:
          version: '${{ env.HELM_VERSION }}'

      - name: Create the default branch directory
        if: (github.base_ref || github.ref_name) != github.event.repository.default_branch
        run: mkdir -p test/e2e/source

      - name: Check out the default branch
        if: (github.base_ref || github.ref_name) != github.event.repository.default_branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.repository.default_branch }}
          fetch-depth: 1
          path: test/e2e/source

      - name: Export E2E directory
        run: |
          if [ '${{ github.base_ref || github.ref_name }}' = '${{ github.event.repository.default_branch }}' ]; then
            echo "E2E_DIR=." >> "$GITHUB_ENV"
          else
            echo "E2E_DIR=test/e2e/source" >> "$GITHUB_ENV"
          fi

      - name: Remove DNS search domain
        run: |
          sudo sed -i '/^search/d' /etc/resolv.conf
          sudo systemctl restart docker

      - uses: actions/setup-go@v3
        with:
          go-version-file: ${{ env.E2E_DIR }}/go.mod
          check-latest: true

      - name: Export Go full version
        run: echo "GO_FULL_VER=$(go version | awk '{print $3}')" >> "$GITHUB_ENV"

      - name: Go cache
        uses: actions/cache/restore@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-e2e-${{ env.GO_FULL_VER }}-x86-${{ hashFiles(format('{0}/**/go.sum', env.E2E_DIR)) }}
          restore-keys: ${{ runner.os }}-e2e-${{ env.GO_FULL_VER }}-x86-

      - name: Install kind
        uses: helm/kind-action@v1
        with:
          install_only: true

      - name: Install ginkgo
        working-directory: ${{ env.E2E_DIR }}
        run: go install -v -mod=mod github.com/onsi/ginkgo/v2/ginkgo

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Load image
        run: docker load --input kube-ovn.tar

      - name: Create kind cluster
        run: |
          sudo pip3 install j2cli
          sudo pip3 install "j2cli[yaml]"
          sudo PATH=~/.local/bin:$PATH make kind-init
          sudo cp -r /root/.kube/ ~/.kube/
          sudo chown -R $(id -un). ~/.kube/

      - name: Install Kube-OVN with Cilium chaining
        run: make kind-install-cilium-chaining

      - name: Run E2E
        working-directory: ${{ env.E2E_DIR }}
        env:
          E2E_CILIUM_CHAINING: "true"
        run: make k8s-conformance-e2e

      - name: Cleanup
        run: sh dist/images/cleanup.sh

  kube-ovn-security-e2e:
    name: Kube-OVN Security E2E
    needs:
      - build-kube-ovn
      - build-e2e-binaries
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        ssl:
          - "true"
          - "false"
        bind-local:
          - "true"
          - "false"
        ip-family:
          - ipv4
          - ipv6
          - dual
    steps:
      - uses: actions/checkout@v3

      - name: Create the default branch directory
        if: (github.base_ref || github.ref_name) != github.event.repository.default_branch
        run: mkdir -p test/e2e/source

      - name: Check out the default branch
        if: (github.base_ref || github.ref_name) != github.event.repository.default_branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.repository.default_branch }}
          fetch-depth: 1
          path: test/e2e/source

      - name: Export E2E directory
        run: |
          if [ '${{ github.base_ref || github.ref_name }}' = '${{ github.event.repository.default_branch }}' ]; then
            echo "E2E_DIR=." >> "$GITHUB_ENV"
          else
            echo "E2E_DIR=test/e2e/source" >> "$GITHUB_ENV"
          fi

      - uses: actions/setup-go@v3
        with:
          go-version-file: ${{ env.E2E_DIR }}/go.mod
          check-latest: true

      - name: Export Go full version
        run: echo "GO_FULL_VER=$(go version | awk '{print $3}')" >> "$GITHUB_ENV"

      - name: Go cache
        uses: actions/cache/restore@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-e2e-${{ env.GO_FULL_VER }}-x86-${{ hashFiles(format('{0}/**/go.sum', env.E2E_DIR)) }}
          restore-keys: ${{ runner.os }}-e2e-${{ env.GO_FULL_VER }}-x86-

      - name: Install kind
        uses: helm/kind-action@v1
        with:
          install_only: true

      - name: Install ginkgo
        working-directory: ${{ env.E2E_DIR }}
        run: go install -v -mod=mod github.com/onsi/ginkgo/v2/ginkgo

      - name: Download image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Load image
        run: docker load --input kube-ovn.tar

      - name: Create kind cluster
        run: |
          sudo pip3 install j2cli
          sudo pip3 install "j2cli[yaml]"
          sudo PATH=~/.local/bin:$PATH make kind-init-ha-${{ matrix.ip-family }}
          sudo cp -r /root/.kube/ ~/.kube/
          sudo chown -R $(id -un). ~/.kube/

      - name: Install Kube-OVN
        run: |
          sudo ENABLE_SSL=${{ matrix.ssl }} ENABLE_BIND_LOCAL_IP=${{ matrix.bind-local }} \
            make kind-install-${{ matrix.ip-family }}

      - name: Run E2E
        working-directory: ${{ env.E2E_DIR }}
        env:
          E2E_BRANCH: ${{ github.base_ref || github.ref_name }}
          E2E_IP_FAMILY: ${{ matrix.ip-family }}
        run: make kube-ovn-security-e2e

      - name: Cleanup
        run: sh dist/images/cleanup.sh

  push:
    name: Push Images
    needs:
      - build-centos-compile
      - k8s-conformance-e2e
      - k8s-netpol-e2e
      - k8s-netpol-legacy-e2e
      - cyclonus-netpol-e2e
      - kube-ovn-conformance-e2e
      - kube-ovn-ic-conformance-e2e
      - lb-svc-e2e
      - underlay-logical-gateway-installation-test
      - chart-installation-test
      - installation-compatibility-test
      - no-ovn-lb-test
      - no-np-test
      - cilium-chaining-e2e
      - kube-ovn-security-e2e
    if: always() && !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled')
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - name: Download kube-ovn image
        uses: actions/download-artifact@v3
        with:
          name: kube-ovn

      - name: Download vpc-nat-gateway image
        uses: actions/download-artifact@v3
        with:
          name: vpc-nat-gateway

      - name: Download centos7-compile image
        uses: actions/download-artifact@v3
        with:
          name: centos7-compile

      # - name: Download centos8-compile image
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: centos8-compile

      - name: Load image
        run: |
          docker load --input kube-ovn.tar
          docker load --input vpc-nat-gateway.tar
          docker load --input centos7-compile.tar
          # docker load --input centos8-compile.tar

      - name: Security Scan
        run: |
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy
          make scan

      - name: Push
        if: github.ref_name == github.event.repository.default_branch || startsWith(github.ref_name, 'release-')
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          COMMIT: ${{ github.sha }}
        run: |
          cat VERSION
          TAG=$(cat VERSION)
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker tag kubeovn/kube-ovn:$TAG kubeovn/kube-ovn-dev:$COMMIT-x86
          docker tag kubeovn/kube-ovn:$TAG kubeovn/kube-ovn:$TAG-x86
          docker tag kubeovn/vpc-nat-gateway:$TAG kubeovn/vpc-nat-gateway-dev:$COMMIT-x86
          docker tag kubeovn/vpc-nat-gateway:$TAG kubeovn/vpc-nat-gateway:$TAG-x86
          docker tag kubeovn/centos7-compile:$TAG kubeovn/centos7-compile-dev:$TAG-x86
          docker tag kubeovn/centos7-compile:$TAG kubeovn/centos7-compile:$TAG-x86
          # docker tag kubeovn/centos8-compile:$TAG kubeovn/centos8-compile-dev:$TAG-x86
          # docker tag kubeovn/centos8-compile:$TAG kubeovn/centos8-compile:$TAG-x86
          docker images
          docker push kubeovn/kube-ovn:$TAG-x86
          docker push kubeovn/kube-ovn:$TAG-no-avx512
          docker push kubeovn/kube-ovn-dev:$COMMIT-x86
          docker push kubeovn/vpc-nat-gateway:$TAG-x86
          docker push kubeovn/vpc-nat-gateway-dev:$COMMIT-x86
          docker push kubeovn/centos7-compile:$TAG-x86
          docker push kubeovn/centos7-compile-dev:$TAG-x86
          # docker push kubeovn/centos8-compile:$TAG-x86
          # docker push kubeovn/centos8-compile-dev:$TAG-x86
