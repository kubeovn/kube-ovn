# VPC NAT Gateway Configuration for Non-Primary CNI Testing
# This configuration creates VPC with NAT Gateway for testing non-primary CNI connectivity

# Create a namespace
apiVersion: v1
kind: Namespace
metadata:
  name: vpc-nat-gw-ns
  labels:
    config-stage: "0"
---
# Create a VPC
apiVersion: kubeovn.io/v1
kind: Vpc
metadata:
  name: vpc-nat-gw
  labels:
    config-stage: "0"
spec:
  namespaces:
    - vpc-nat-gw-ns
  staticRoutes:
    - cidr: 0.0.0.0/0
      nextHopIP: 10.101.0.254
      policy: policyDst
---
# Network attachment definition for VPC NAT GW
apiVersion: "k8s.cni.cncf.io/v1"
kind: NetworkAttachmentDefinition
metadata:
  name: vpc-nat-pod-nad
  namespace: vpc-nat-gw-ns
  labels:
    config-stage: "0"
spec:
  config: '{
      "cniVersion": "0.3.1",
      "name": "kube-ovn",
      "type": "kube-ovn",
      "server_socket": "/run/openvswitch/kube-ovn-daemon.sock",
      "provider": "vpc-nat-pod-nad.vpc-nat-gw-ns.ovn"
    }'
---
# Create a subnet
apiVersion: kubeovn.io/v1
kind: Subnet
metadata:
  name: vpc-nat-gw-subnet
  labels:
    config-stage: "0"
spec:
  vpc: vpc-nat-gw
  provider: vpc-nat-pod-nad.vpc-nat-gw-ns.ovn
  cidrBlock: 10.101.0.0/24
  protocol: IPv4
  namespaces:
    - vpc-nat-gw-ns
---
# Create config map for VPC NAT
apiVersion: v1
kind: ConfigMap
metadata:
  name: ovn-vpc-nat-config
  namespace: kube-system
  labels:
    config-stage: "0"
data:
  image: <kube-ovn-vpc-nat-image-name>
---
# Create config map for VPC NAT GW
apiVersion: v1
kind: ConfigMap
metadata:
  name: ovn-vpc-nat-gw-config
  namespace: kube-system
  labels:
    config-stage: "0"
data:
  enable-vpc-nat-gw: 'true'
---
# Network attachment definition for external subnet
apiVersion: "k8s.cni.cncf.io/v1"
kind: NetworkAttachmentDefinition
metadata:
  name: vpc-nat-gw-ext-subnet
  namespace: kube-system
  labels:
    config-stage: "0"
spec:
  config: '{
      "cniVersion": "0.3.0",
      "type": "macvlan",
      "master": "eth1",
      "mode": "bridge",
      "ipam": {
        "type": "kube-ovn",
        "server_socket": "/run/openvswitch/kube-ovn-daemon.sock",
        "provider": "vpc-nat-gw-ext-subnet.kube-system"
      }
    }'
---
# External subnet for KIND bridge network (dynamically configured)
apiVersion: kubeovn.io/v1
kind: Subnet
metadata:
  name: vpc-nat-gw-ext-subnet
  namespace: vpc-nat-gw-ns
  labels:
    config-stage: "0"
spec:
  protocol: IPv4
  provider: vpc-nat-gw-ext-subnet.kube-system
  cidrBlock: <vpc-nat-gw-ext-cidr>
  gateway: <vpc-nat-gw-ext-gateway>
  excludeIps:
    <vpc-nat-gw-ext-exclude-ip>
---
# Create VPC NAT GW
apiVersion: kubeovn.io/v1
kind: VpcNatGateway
metadata:
  name: vpc-nat-gw-gateway
  labels:
    config-stage: "2"
  annotations:
    k8s.v1.cni.cncf.io/networks: vpc-nat-gw-ns/vpc-nat-pod-nad
spec:
  vpc: vpc-nat-gw
  subnet: vpc-nat-gw-subnet
  lanIp: 10.101.0.254
  externalSubnets:
    - vpc-nat-gw-ext-subnet
---
# Create EIP1
apiVersion: kubeovn.io/v1
kind: IptablesEIP
metadata:
  name: vpc-nat-gw-eip1
  labels:
    config-stage: "3"
spec:
  natGwDp: vpc-nat-gw-gateway
  externalSubnet: vpc-nat-gw-ext-subnet
---
# Create EIP2
apiVersion: kubeovn.io/v1
kind: IptablesEIP
metadata:
  name: vpc-nat-gw-eip2
  labels:
    config-stage: "3"
spec:
  natGwDp: vpc-nat-gw-gateway
  externalSubnet: vpc-nat-gw-ext-subnet
---
# Create DNAT for pod vpc-nat-gw-pod1
apiVersion: kubeovn.io/v1
kind: IptablesDnatRule
metadata:
  name: vpc-nat-gw-dnat01
  labels:
    config-stage: "3"
spec:
  eip: vpc-nat-gw-eip1
  externalPort: '8888'
  internalIp: 10.101.0.3
  internalPort: '80'
  protocol: tcp
---
# Create DNAT for pod vpc-nat-gw-pod2
apiVersion: kubeovn.io/v1
kind: IptablesDnatRule
metadata:
  name: vpc-nat-gw-dnat02
  labels:
    config-stage: "3"
spec:
  eip: vpc-nat-gw-eip2
  externalPort: '8888'
  internalIp: 10.101.0.4
  internalPort: '80'
  protocol: tcp
---
# Create SNAT for pod vpc-nat-gw-pod1
apiVersion: kubeovn.io/v1
kind: IptablesSnatRule
metadata:
  name: vpc-nat-gw-snat01
  labels:
    config-stage: "3"
spec:
  eip: vpc-nat-gw-eip1
  internalCIDR: 10.101.0.3/32
---
# Create SNAT for pod vpc-nat-gw-pod2
apiVersion: kubeovn.io/v1
kind: IptablesSnatRule
metadata:
  name: vpc-nat-gw-snat02
  labels:
    config-stage: "3"
spec:
  eip: vpc-nat-gw-eip2
  internalCIDR: 10.101.0.4/32
---
# Create pod 1
apiVersion: v1
kind: Pod
metadata:
  namespace: vpc-nat-gw-ns
  name: vpc-nat-gw-pod1
  labels:
    app: vpc-nat-gw-pod1
    config-stage: "1"
  annotations:
    # using static IP for the pod
    vpc-nat-pod-nad.vpc-nat-gw-ns.ovn.kubernetes.io/ip_pool: "10.101.0.3"
    k8s.v1.cni.cncf.io/networks: vpc-nat-gw-ns/vpc-nat-pod-nad
spec:
  containers:
    - name: vpc-nat-gw-pod1
      image: docker.io/library/nginx:alpine
---
# Create pod 2
apiVersion: v1
kind: Pod
metadata:
  namespace: vpc-nat-gw-ns
  name: vpc-nat-gw-pod2
  labels:
    app: vpc-nat-gw-pod2
    config-stage: "1"
  annotations:
    # using static IP for the pod
    vpc-nat-pod-nad.vpc-nat-gw-ns.ovn.kubernetes.io/ip_pool: "10.101.0.4"
    k8s.v1.cni.cncf.io/networks: vpc-nat-gw-ns/vpc-nat-pod-nad
spec:
  containers:
    - name: vpc-nat-gw-pod2
      image: docker.io/library/nginx:alpine
