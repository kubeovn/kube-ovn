From e889d46924085ca0fe38a2847da973dfe6ea100e Mon Sep 17 00:00:00 2001
From: zhangzujian <zhangzujian.7@gmail.com>
Date: Thu, 10 Apr 2025 01:29:00 +0000
Subject: [PATCH] fix reaching resubmit limit in underlay

Signed-off-by: zhangzujian <zhangzujian.7@gmail.com>
---
 northd/en-global-config.c |  5 ++++
 northd/northd.c           | 54 +++++++++++++++++++++++++++++++++++++++
 2 files changed, 59 insertions(+)

diff --git a/northd/en-global-config.c b/northd/en-global-config.c
index f08c612962..23d559f27d 100644
--- a/northd/en-global-config.c
+++ b/northd/en-global-config.c
@@ -644,6 +644,11 @@ check_nb_options_out_of_sync(
         return true;
     }
 
+    if (config_out_of_sync(&nb->options, &config_data->nb_options,
+                           "bcast_arp_req_flood", false)) {
+        return true;
+    }
+
     return false;
 }
 
diff --git a/northd/northd.c b/northd/northd.c
index 882f9475f8..4a4d75415b 100644
--- a/northd/northd.c
+++ b/northd/northd.c
@@ -98,6 +98,9 @@ static bool vxlan_mode;
 
 static bool vxlan_ic_mode;
 
+static bool bcast_arp_req_flood = true;
+
+
 #define MAX_OVN_TAGS 4096
 
 
@@ -9337,6 +9340,11 @@ build_lswitch_lflows_l2_unknown(struct ovn_datapath *od,
                       "outport == \"none\"",
                       "outport = \""MC_UNKNOWN "\"; output;",
                       lflow_ref);
+        if (!bcast_arp_req_flood) {
+            ovn_lflow_add(lflows, od, S_SWITCH_IN_L2_LKUP, 90,
+                          "eth.bcast && arp.op == 1", "next;",
+                          lflow_ref);
+        }
     } else {
         ovn_lflow_add_drop_with_desc(
             lflows, od, S_SWITCH_IN_L2_UNKNOWN, 50, "outport == \"none\"",
@@ -9776,6 +9784,49 @@ build_lswitch_arp_nd_responder_default(struct ovn_datapath *od,
                   lflow_ref);
 }
 
+/* Ingress table 19: forward ARP/ND request from localnet/vtep
+ * to logical switch port for known IPs.
+ * (priority 110)*/
+static void
+build_lswitch_arp_nd_forward_for_unknown_ips(struct ovn_port *op,
+                                             struct lflow_table *lflows,
+                                             struct ds *actions,
+                                             struct ds *match)
+{
+    if (bcast_arp_req_flood) {
+        return;
+    }
+    if (!op->od->nbs) {
+        return;
+    }
+    if (is_vlan_transparent(op->od)) {
+        return;
+    }
+
+    for (size_t i = 0; i < op->od->n_localnet_ports; i++) {
+        struct ovn_port *localnet_port = op->od->localnet_ports[i];
+        if (!localnet_port->nbsp) {
+            continue;
+        }
+
+        for (size_t j = 0; j < op->n_lsp_addrs; j++) {
+            for (size_t k = 0; k < op->lsp_addrs[j].n_ipv4_addrs; k++) {
+                ds_clear(match);
+                ds_put_format(match,
+                              "inport == %s && eth.bcast && "
+                              "arp.op == 1 && arp.tpa == %s",
+                              localnet_port->json_key,
+                              op->lsp_addrs[j].ipv4_addrs[k].addr_s);
+                ds_clear(actions);
+                ds_put_format(actions, "outport = %s; output;",
+                              op->json_key);
+                ovn_lflow_add(lflows, op->od, S_SWITCH_IN_ARP_ND_RSP, 110,
+                              ds_cstr(match), ds_cstr(actions), op->lflow_ref);
+            }
+        }
+    }
+}
+
 /* Ingress table 19: ARP/ND responder for service monitor source ip.
  * (priority 110)*/
 static void
@@ -17609,6 +17660,7 @@ build_lswitch_and_lrouter_iterate_by_lsp(struct ovn_port *op,
     build_lswitch_arp_nd_responder_skip_local(op, lflows, match);
     build_lswitch_arp_nd_responder_known_ips(op, lflows, ls_ports,
                                              meter_groups, actions, match);
+    build_lswitch_arp_nd_forward_for_unknown_ips(op, lflows, actions, match);
     build_lswitch_dhcp_options_and_response(op, lflows, meter_groups);
     build_lswitch_external_port(op, lflows);
     build_lswitch_icmp_packet_toobig_admin_flows(op, lflows, match, actions);
@@ -19045,6 +19097,8 @@ ovnnb_db_run(struct northd_input *input_data,
 
     use_ct_inv_match = smap_get_bool(input_data->nb_options,
                                      "use_ct_inv_match", true);
+    bcast_arp_req_flood = smap_get_bool(input_data->nb_options,
+                                        "bcast_arp_req_flood", true);
 
     /* deprecated, use --event instead */
     controller_event_en = smap_get_bool(input_data->nb_options,
