From bc8cbb9d2f55d8555a2d5b82cd0d3ccc8b1d50b3 Mon Sep 17 00:00:00 2001
From: clyi <clyi@alauda.io>
Date: Thu, 31 Jul 2025 18:58:06 +0800
Subject: [PATCH] [PATCH] northd: add nb option version_compatibility

---
 northd/en-global-config.c |   5 ++
 northd/northd.c           | 142 +++++++++++++++++++++++++++-----------
 2 files changed, 107 insertions(+), 40 deletions(-)

diff --git a/northd/en-global-config.c b/northd/en-global-config.c
index 26d89b6676..3f934ccfff 100644
--- a/northd/en-global-config.c
+++ b/northd/en-global-config.c
@@ -664,6 +664,11 @@ check_nb_options_out_of_sync(
         return true;
     }
 
+    if (config_out_of_sync(&nb->options, &config_data->nb_options,
+                           "version_compatibility", false)) {
+        return true;
+    }
+
     return false;
 }
 
diff --git a/northd/northd.c b/northd/northd.c
index 9e8e813d79..6ca4c12c93 100644
--- a/northd/northd.c
+++ b/northd/northd.c
@@ -107,6 +107,11 @@ static bool ls_ct_skip_dst_lport_ips = false;
 
 static bool ls_dnat_mod_dl_dst = false;
 
+static bool compatible_21_06 = false;
+static bool compatible_22_03 = false;
+static bool compatible_22_12 = false;
+static bool compatible_24_03 = false;
+
 #define MAX_OVN_TAGS 4096
 
 
@@ -140,6 +145,10 @@ static bool ls_dnat_mod_dl_dst = false;
 #define REGBIT_ACL_PERSIST_ID     "reg0[20]"
 #define REGBIT_ACL_HINT_ALLOW_PERSISTED "reg0[21]"
 
+#define REG_ORIG_DIP_IPV4         "reg1"
+#define REG_ORIG_DIP_IPV6         "xxreg1"
+#define REG_ORIG_TP_DPORT         "reg2[0..15]"
+
 /* Register definitions for switches and routers. */
 
 /* Registers used for LB Affinity.
@@ -5769,8 +5778,11 @@ build_lswitch_port_sec_op(struct ovn_port *op, struct lflow_table *lflows,
                                           op->key, &op->nbsp->header_,
                                           op->lflow_ref);
     } else if (queue_id) {
-        ds_put_cstr(actions,
-                    REGBIT_PORT_SEC_DROP" = check_in_port_sec(); next;");
+        ds_put_format(actions,
+                      "%snext;",
+                      !compatible_22_03 ?
+                      REGBIT_PORT_SEC_DROP" = check_in_port_sec(); " :
+                      "");
         ovn_lflow_add_with_lport_and_hint(lflows, op->od,
                                           S_SWITCH_IN_CHECK_PORT_SEC, 70,
                                           ds_cstr(match), ds_cstr(actions),
@@ -5831,7 +5843,7 @@ build_lswitch_learn_fdb_op(
         ds_clear(match);
         ds_clear(actions);
         ds_put_format(match, "inport == %s", op->json_key);
-        if (lsp_is_localnet(op->nbsp)) {
+        if (lsp_is_localnet(op->nbsp) && !compatible_22_03) {
             ds_put_cstr(actions, "flags.localnet = 1; ");
         }
         ds_put_format(actions, REGBIT_LKUP_FDB
@@ -5888,8 +5900,10 @@ build_lswitch_output_port_sec_od(struct ovn_datapath *od,
     ovn_lflow_add(lflows, od, S_SWITCH_OUT_CHECK_PORT_SEC, 100,
                   "eth.mcast", REGBIT_PORT_SEC_DROP" = 0; next;",
                   lflow_ref);
+    const char *action = compatible_22_03 ? "next;" :
+                         REGBIT_PORT_SEC_DROP " = check_out_port_sec(); next;";
     ovn_lflow_add(lflows, od, S_SWITCH_OUT_CHECK_PORT_SEC, 0, "1",
-                  REGBIT_PORT_SEC_DROP" = check_out_port_sec(); next;",
+                  action,
                   lflow_ref);
 
     ovn_lflow_add_drop_with_desc(
@@ -7503,7 +7517,7 @@ build_acl_log_related_flows(const struct ovn_datapath *od,
      */
     bool ingress = !strcmp(acl->direction, "from-lport") ? true :false;
     bool log_related = smap_get_bool(&acl->options, "log-related",
-                                     false);
+                                     false) && !compatible_21_06;
 
     if (!strcmp(acl->action, "allow-stateless") || !has_stateful) {
         /* Not stateful */
@@ -8346,7 +8360,7 @@ build_lb_rules(struct lflow_table *lflows, struct ovn_lb_datapaths *lb_dps,
                struct ds *match, struct ds *action,
                const struct shash *meter_groups,
                const struct hmap *svc_monitor_map,
-               struct hmap *ls_ports)
+               const struct hmap *ls_ports)
 {
     const struct ovn_northd_lb *lb = lb_dps->lb;
     for (size_t i = 0; i < lb->n_vips; i++) {
@@ -8578,6 +8592,7 @@ build_stateful(struct ovn_datapath *od,
                struct lflow_ref *lflow_ref)
 {
     struct ds actions = DS_EMPTY_INITIALIZER;
+    const char *ct_block_action = "ct_mark.blocked";
 
     /* Ingress LB, Ingress and Egress stateful Table (Priority 0): Packets are
      * allowed by default. */
@@ -8593,15 +8608,25 @@ build_stateful(struct ovn_datapath *od,
      * We always set ct_mark.blocked to 0 here as
      * any packet that makes it this far is part of a connection we
      * want to allow to continue. */
-    ds_put_cstr(&actions,
-                 "ct_commit { "
-                    "ct_mark.blocked = 0; "
-                    "ct_mark.allow_established = " REGBIT_ACL_PERSIST_ID "; "
-                    "ct_mark.obs_stage = " REGBIT_ACL_OBS_STAGE "; "
-                    "ct_mark.obs_collector_id = " REG_OBS_COLLECTOR_ID_EST "; "
-                    "ct_label.obs_point_id = " REG_OBS_POINT_ID_EST "; "
-                    "ct_label.acl_id = " REG_ACL_ID "; "
-                  "}; next;");
+    if (compatible_24_03 || compatible_22_03 || compatible_22_12) {
+        ds_put_format(&actions, "ct_commit { %s = 0; }; next;",
+                      ct_block_action);
+    } else if (compatible_21_06) {
+        ds_put_format(&actions, "ct_commit { %s = 0; "
+                                "ct_label.label = reg3; }; next;",
+                      ct_block_action);
+    } else {
+        ds_put_cstr(&actions,
+            "ct_commit { "
+               "ct_mark.blocked = 0; "
+               "ct_mark.allow_established = " REGBIT_ACL_PERSIST_ID "; "
+               "ct_mark.obs_stage = " REGBIT_ACL_OBS_STAGE "; "
+               "ct_mark.obs_collector_id = " REG_OBS_COLLECTOR_ID_EST "; "
+               "ct_label.obs_point_id = " REG_OBS_POINT_ID_EST "; "
+               "ct_label.acl_id = " REG_ACL_ID "; "
+             "}; next;");
+    }
+
     ovn_lflow_add(lflows, od, S_SWITCH_IN_STATEFUL, 100,
                   REGBIT_CONNTRACK_COMMIT" == 1 && "
                   REGBIT_ACL_LABEL" == 1",
@@ -8668,16 +8693,19 @@ build_lb_hairpin(const struct ls_stateful_record *ls_stateful_rec,
          * after conntrack.  It is the kernel datapath conntrack behavior.
          * We need to find a better way to handle the fragmented packets.
          * */
-        ovn_lflow_add(lflows, od, S_SWITCH_IN_LB, 110,
-                      "ct.trk && !ct.rpl && "REGBIT_IP_FRAG" == 1 && ip4",
-                      REG_LB_IPV4 " = ct_nw_dst(); "
-                      REG_LB_PORT " = ct_tp_dst(); next;",
-                      lflow_ref);
-        ovn_lflow_add(lflows, od, S_SWITCH_IN_LB, 110,
-                      "ct.trk && !ct.rpl && "REGBIT_IP_FRAG" == 1 && ip6",
-                      REG_LB_IPV6 " = ct_ip6_dst(); "
-                      REG_LB_PORT " = ct_tp_dst(); next;",
-                      lflow_ref);
+
+        if (!compatible_22_12) {
+            ovn_lflow_add(lflows, od, S_SWITCH_IN_LB, 110,
+                          "ct.trk && !ct.rpl && "REGBIT_IP_FRAG" == 1 && ip4",
+                          REG_ORIG_DIP_IPV4 " = ct_nw_dst(); "
+                          REG_ORIG_TP_DPORT " = ct_tp_dst(); next;",
+                          lflow_ref);
+            ovn_lflow_add(lflows, od, S_SWITCH_IN_LB, 110,
+                          "ct.trk && !ct.rpl && "REGBIT_IP_FRAG" == 1 && ip6",
+                          REG_ORIG_DIP_IPV6 " = ct_ip6_dst(); "
+                          REG_ORIG_TP_DPORT " = ct_tp_dst(); next;",
+                          lflow_ref);
+        }
 
         /* Set REGBIT_HAIRPIN in the original direction and
          * REGBIT_HAIRPIN_REPLY in the reply direction.
@@ -8987,8 +9015,9 @@ build_lswitch_rport_arp_req_self_orig_flow(struct ovn_port *op,
 
     ds_put_format(&match,
                   "eth.src == %s && eth.dst == ff:ff:ff:ff:ff:ff && "
-                  "(arp.op == 1 || rarp.op == 3 || nd_ns)",
-                  ds_cstr(&eth_src));
+                  "(arp.op == 1 || %snd_ns)",
+                  ds_cstr(&eth_src),
+                  !compatible_22_03 ? "rarp.op == 3 || " : "");
     ovn_lflow_add(lflows, od, S_SWITCH_IN_L2_LKUP, priority, ds_cstr(&match),
                   "outport = \""MC_FLOOD_L2"\"; output;", lflow_ref);
 
@@ -9713,12 +9742,14 @@ build_lswitch_lflows_admission_control(struct ovn_datapath *od,
 {
     ovs_assert(od->nbs);
 
-    /* Default action for recirculated ICMP error 'packet too big'. */
-    ovn_lflow_add_drop_with_desc(
-        lflows, od, S_SWITCH_IN_CHECK_PORT_SEC, 105,
-        "((ip4 && icmp4.type == 3 && icmp4.code == 4) ||"
-        " (ip6 && icmp6.type == 2 && icmp6.code == 0)) &&"
-        " flags.tunnel_rx == 1", "ICMP: packet too big", lflow_ref);
+
+    if (!compatible_22_12) {
+        /* Default action for recirculated ICMP error 'packet too big'. */
+        ovn_lflow_add(lflows, od, S_SWITCH_IN_CHECK_PORT_SEC, 105,
+                      "((ip4 && icmp4.type == 3 && icmp4.code == 4) ||"
+                      " (ip6 && icmp6.type == 2 && icmp6.code == 0)) &&"
+                      " flags.tunnel_rx == 1", debug_drop_action(), lflow_ref);
+    }
 
     /* Logical VLANs not supported. */
     if (!is_vlan_transparent(od)) {
@@ -9736,8 +9767,10 @@ build_lswitch_lflows_admission_control(struct ovn_datapath *od,
         "eth.src[40]", "Incoming Broadcast/multicast source"
         " address is invalid", lflow_ref);
 
+    const char *action = compatible_22_03 ? "next;" :
+                         REGBIT_PORT_SEC_DROP " = check_in_port_sec(); next;";
     ovn_lflow_add(lflows, od, S_SWITCH_IN_CHECK_PORT_SEC, 50, "1",
-                  REGBIT_PORT_SEC_DROP" = check_in_port_sec(); next;",
+                  action,
                   lflow_ref);
 
     ovn_lflow_add_drop_with_desc(
@@ -13412,6 +13445,10 @@ build_lrouter_icmp_packet_toobig_admin_flows(
 {
     ovs_assert(op->nbrp);
 
+    if (compatible_22_12) {
+        return;
+    }
+
     if (!lrp_is_l3dgw(op)) {
         return;
     }
@@ -13437,6 +13474,10 @@ build_lswitch_icmp_packet_toobig_admin_flows(
 {
     ovs_assert(op->nbsp);
 
+    if (compatible_22_12) {
+        return;
+    }
+
     if (!lsp_is_router(op->nbsp)) {
         for (size_t i = 0; i < op->n_lsp_addrs; i++) {
             ds_clear(match);
@@ -13703,11 +13744,13 @@ build_adm_ctrl_flows_for_lrouter(
 {
     ovs_assert(od->nbr);
 
-    /* Default action for recirculated ICMP error 'packet too big'. */
-    ovn_lflow_add(lflows, od, S_ROUTER_IN_ADMISSION, 110,
-                  "((ip4 && icmp4.type == 3 && icmp4.code == 4) ||"
-                  " (ip6 && icmp6.type == 2 && icmp6.code == 0)) &&"
-                  " flags.tunnel_rx == 1", debug_drop_action(), lflow_ref);
+    if (!compatible_22_12) {
+        /* Default action for recirculated ICMP error 'packet too big'. */
+        ovn_lflow_add(lflows, od, S_ROUTER_IN_ADMISSION, 110,
+                      "((ip4 && icmp4.type == 3 && icmp4.code == 4) ||"
+                      " (ip6 && icmp6.type == 2 && icmp6.code == 0)) &&"
+                      " flags.tunnel_rx == 1", debug_drop_action(), lflow_ref);
+    }
 
     /* Logical VLANs not supported.
      * Broadcast/multicast source address is invalid. */
@@ -13972,8 +14015,11 @@ build_neigh_learning_flows_for_lrouter(
     ds_put_format(match, REGBIT_LOOKUP_NEIGHBOR_RESULT" == 1%s",
                   learn_from_arp_request ? "" :
                   " || "REGBIT_LOOKUP_NEIGHBOR_IP_RESULT" == 0");
+    ds_clear(actions);
+    ds_put_format(actions, "%snext;",
+                  !compatible_22_12 ? "mac_cache_use; " : "");
     ovn_lflow_add(lflows, od, S_ROUTER_IN_LEARN_NEIGHBOR, 100,
-                  ds_cstr(match), "mac_cache_use; next;",
+                  ds_cstr(match), ds_cstr(actions),
                   lflow_ref);
 
     ovn_lflow_metered(lflows, od, S_ROUTER_IN_LEARN_NEIGHBOR, 90,
@@ -19541,6 +19587,22 @@ ovnnb_db_run(struct northd_input *input_data,
     ls_dnat_mod_dl_dst = smap_get_bool(input_data->nb_options,
                                        "ls_dnat_mod_dl_dst", false);
 
+    const char *s = smap_get_def(input_data->nb_options,
+                                 "version_compatibility", "");
+    int major, minor;
+    int n = sscanf(s, "%2d.%2d", &major, &minor);
+    if (n == 2) {
+        compatible_21_06 = (major < 21 || (major == 21 && minor <= 6));
+        compatible_22_03 = (major < 22 || (major == 22 && minor <= 3));
+        compatible_22_12 = (major < 22 || (major == 22 && minor <= 12));
+        compatible_24_03 = (major < 24 || (major == 24 && minor <= 3));
+    } else {
+        compatible_21_06 = false;
+        compatible_22_03 = false;
+        compatible_22_12 = false;
+        compatible_24_03 = false;
+    }
+
     build_datapaths(ovnsb_txn,
                     input_data->nbrec_logical_switch_table,
                     input_data->nbrec_logical_router_table,
