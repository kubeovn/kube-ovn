From 2eaaf89fbf3ee2172719ed10d045fd79900edc8e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Miika=20Pet=C3=A4j=C3=A4niemi?=
 <miika.petajaniemi@solita.fi>
Date: Wed, 7 Dec 2022 14:03:39 +0200
Subject: [PATCH] netdev-linux: Add jitter parameter to the netem qos options.
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Adds jitter option to enable emulating latency fluctuation with netem.

Submitted-at: https://github.com/openvswitch/ovs/pull/407
Signed-off-by: Miika Petäjäniemi <miika.petajaniemi@solita.fi>
Signed-off-by: Ilya Maximets <i.maximets@ovn.org>
---
 lib/netdev-linux.c   | 26 ++++++++++++++++++--------
 vswitchd/vswitch.xml |  4 ++++
 2 files changed, 22 insertions(+), 8 deletions(-)

diff --git a/lib/netdev-linux.c b/lib/netdev-linux.c
index 65bdd51dbaa..2e400ca3d63 100644
--- a/lib/netdev-linux.c
+++ b/lib/netdev-linux.c
@@ -4345,6 +4345,7 @@ struct netem {
     uint32_t latency;
     uint32_t limit;
     uint32_t loss;
+    uint32_t jitter;
 };
 
 static struct netem *
@@ -4356,7 +4357,7 @@ netem_get__(const struct netdev *netdev_)
 
 static void
 netem_install__(struct netdev *netdev_, uint32_t latency,
-                uint32_t limit, uint32_t loss)
+                uint32_t limit, uint32_t loss, uint32_t jitter)
 {
     struct netdev_linux *netdev = netdev_linux_cast(netdev_);
     struct netem *netem;
@@ -4366,13 +4367,14 @@ netem_install__(struct netdev *netdev_, uint32_t latency,
     netem->latency = latency;
     netem->limit = limit;
     netem->loss = loss;
+    netem->jitter = jitter;
 
     netdev->tc = &netem->tc;
 }
 
 static int
 netem_setup_qdisc__(struct netdev *netdev, uint32_t latency,
-                    uint32_t limit, uint32_t loss)
+                    uint32_t limit, uint32_t loss, uint32_t jitter)
 {
     struct tc_netem_qopt opt;
     struct ofpbuf request;
@@ -4408,6 +4410,7 @@ netem_setup_qdisc__(struct netdev *netdev, uint32_t latency,
     }
 
     opt.latency = tc_time_to_ticks(latency);
+    opt.jitter = tc_time_to_ticks(jitter);
 
     nl_msg_put_string(&request, TCA_KIND, "netem");
     nl_msg_put_unspec(&request, TCA_OPTIONS, &opt, sizeof opt);
@@ -4415,9 +4418,10 @@ netem_setup_qdisc__(struct netdev *netdev, uint32_t latency,
     error = tc_transact(&request, NULL);
     if (error) {
         VLOG_WARN_RL(&rl, "failed to replace %s qdisc, "
-                          "latency %u, limit %u, loss %u error %d(%s)",
+                          "latency %u, limit %u, loss %u, jitter %u "
+                          "error %d(%s)",
                      netdev_get_name(netdev),
-                     opt.latency, opt.limit, opt.loss,
+                     opt.latency, opt.limit, opt.loss, opt.jitter,
                      error, ovs_strerror(error));
     }
     return error;
@@ -4430,6 +4434,7 @@ netem_parse_qdisc_details__(struct netdev *netdev OVS_UNUSED,
     netem->latency = smap_get_ullong(details, "latency", 0);
     netem->limit = smap_get_ullong(details, "limit", 0);
     netem->loss = smap_get_ullong(details, "loss", 0);
+    netem->jitter = smap_get_ullong(details, "jitter", 0);
 
     if (!netem->limit) {
         netem->limit = 1000;
@@ -4444,9 +4449,10 @@ netem_tc_install(struct netdev *netdev, const struct smap *details)
 
     netem_parse_qdisc_details__(netdev, details, &netem);
     error = netem_setup_qdisc__(netdev, netem.latency,
-                                netem.limit, netem.loss);
+                                netem.limit, netem.loss, netem.jitter);
     if (!error) {
-        netem_install__(netdev, netem.latency, netem.limit, netem.loss);
+        netem_install__(netdev, netem.latency,
+                        netem.limit, netem.loss, netem.jitter);
     }
     return error;
 }
@@ -4462,7 +4468,8 @@ netem_tc_load(struct netdev *netdev, struct ofpbuf *nlmsg)
     error = tc_parse_qdisc(nlmsg, &kind, &nlattr);
     if (error == 0) {
         netem = nl_attr_get(nlattr);
-        netem_install__(netdev, netem->latency, netem->limit, netem->loss);
+        netem_install__(netdev, netem->latency,
+                        netem->limit, netem->loss, netem->jitter);
         return 0;
     }
 
@@ -4484,6 +4491,7 @@ netem_qdisc_get(const struct netdev *netdev, struct smap *details)
     smap_add_format(details, "latency", "%u", netem->latency);
     smap_add_format(details, "limit", "%u", netem->limit);
     smap_add_format(details, "loss", "%u", netem->loss);
+    smap_add_format(details, "jitter", "%u", netem->jitter);
     return 0;
 }
 
@@ -4493,10 +4501,12 @@ netem_qdisc_set(struct netdev *netdev, const struct smap *details)
     struct netem netem;
 
     netem_parse_qdisc_details__(netdev, details, &netem);
-    netem_install__(netdev, netem.latency, netem.limit, netem.loss);
+    netem_install__(netdev, netem.latency,
+                    netem.limit, netem.loss, netem.jitter);
     netem_get__(netdev)->latency = netem.latency;
     netem_get__(netdev)->limit = netem.limit;
     netem_get__(netdev)->loss = netem.loss;
+    netem_get__(netdev)->jitter = netem.jitter;
     return 0;
 }
 
diff --git a/vswitchd/vswitch.xml b/vswitchd/vswitch.xml
index 1204805b13e..0a7d3ca0449 100644
--- a/vswitchd/vswitch.xml
+++ b/vswitchd/vswitch.xml
@@ -4907,6 +4907,10 @@ ovs-vsctl add-port br0 p0 -- set Interface p0 type=patch options:peer=p1 \
         Adds an independent loss probability to the packets outgoing from the
         chosen network interface.
       </column>
+      <column name="other_config" key="jitter" type='{"type": "integer"}'>
+        Adds the provided jitter to the latency outgoing to the
+        chosen network interface. The jitter value expressed in us.
+      </column>
     </group>
 
     <group title="Common Columns">
