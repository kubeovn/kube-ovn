From 9286e1fd578fdb8f565a0f4aa9066b538295e1ac Mon Sep 17 00:00:00 2001
From: clyi <clyi@alauda.io>
Date: Tue, 11 Feb 2025 10:17:52 +0800
Subject: [PATCH] add select local lb backend

Signed-off-by: clyi <clyi@alauda.io>
---
 northd/lb.c     |  34 ++++++++++++
 northd/lb.h     |   1 +
 northd/northd.c | 139 +++++++++++++++++++++++++++++++++++++++++++++---
 northd/northd.h |  10 ++++
 4 files changed, 177 insertions(+), 7 deletions(-)

diff --git a/northd/lb.c b/northd/lb.c
index af0c92954c..71633ae788 100644
--- a/northd/lb.c
+++ b/northd/lb.c
@@ -150,6 +150,36 @@ ovn_lb_vip_backends_health_check_init(const struct ovn_northd_lb *lb,
     ds_destroy(&key);
 }
 
+static void
+ovn_lb_backend_set_logical_port(const struct ovn_northd_lb *lb,
+                                const struct ovn_lb_vip *lb_vip,
+                                struct ovn_northd_lb_vip *lb_vip_nb)
+{
+    struct ds key = DS_EMPTY_INITIALIZER;
+    for (size_t j = 0; j < lb_vip->n_backends; j++) {
+        struct ovn_lb_backend *backend = &lb_vip->backends[j];
+        ds_clear(&key);
+        ds_put_format(&key, IN6_IS_ADDR_V4MAPPED(&lb_vip->vip)
+                      ? "%s" : "[%s]", backend->ip_str);
+        const char *s = smap_get(&lb->nlb->ip_port_mappings, ds_cstr(&key));
+        if (!s) {
+            continue;
+        }
+        char *port_name = xstrdup(s);
+        char *p = strstr(port_name, ":");
+        if (p) {
+            *p = 0;
+        }
+        struct ovn_northd_lb_backend *backend_nb =
+            &lb_vip_nb->backends_nb[j];
+        backend_nb->logical_port = xstrdup(port_name);
+        
+        free(port_name);
+    }
+
+    ds_destroy(&key);
+}
+
 static
 void ovn_northd_lb_vip_destroy(struct ovn_northd_lb_vip *vip)
 {
@@ -286,6 +316,8 @@ ovn_northd_lb_init(struct ovn_northd_lb *lb,
     const char *mode = smap_get(&nbrec_lb->options, "neighbor_responder");
     lb->neigh_mode = ovn_lb_get_neigh_mode(nbrec_lb, mode, template);
 
+    lb->prefer_local_backend = smap_get_bool(&nbrec_lb->options, "prefer_local_backend", false);
+
     uint32_t affinity_timeout =
         smap_get_uint(&nbrec_lb->options, "affinity_timeout", 0);
     if (affinity_timeout > UINT16_MAX) {
@@ -337,6 +369,8 @@ ovn_northd_lb_init(struct ovn_northd_lb *lb,
 
         if (lb_vip_nb->lb_health_check) {
             ovn_lb_vip_backends_health_check_init(lb, lb_vip, lb_vip_nb);
+        } else if (lb->prefer_local_backend) {
+            ovn_lb_backend_set_logical_port(lb, lb_vip, lb_vip_nb);
         }
     }
 
diff --git a/northd/lb.h b/northd/lb.h
index aa6616af41..c7a9ba90b5 100644
--- a/northd/lb.h
+++ b/northd/lb.h
@@ -65,6 +65,7 @@ struct ovn_northd_lb {
     bool routable;
     bool skip_snat;
     bool template;
+    bool prefer_local_backend;
     uint16_t affinity_timeout;
 
     struct sset ips_v4;
diff --git a/northd/northd.c b/northd/northd.c
index d3b4fed086..c75f2e51de 100644
--- a/northd/northd.c
+++ b/northd/northd.c
@@ -3764,7 +3764,9 @@ build_lb_vip_actions(const struct ovn_northd_lb *lb,
                      struct ds *skip_snat_action,
                      struct ds *force_snat_action,
                      bool ls_dp,
-                     const struct hmap *svc_monitor_map)
+                     const struct hmap *svc_monitor_map,
+                     const char* chassis_backend_ips,
+                     const struct sset *chassis_logical_ports)
 {
     bool reject = !lb_vip->n_backends && lb_vip->empty_backend_rej;
     bool drop = !lb_vip->n_backends && !lb_vip->empty_backend_rej;
@@ -3788,6 +3790,12 @@ build_lb_vip_actions(const struct ovn_northd_lb *lb,
             struct ovn_northd_lb_backend *backend_nb =
                 &lb_vip_nb->backends_nb[i];
 
+            if (chassis_logical_ports) {
+                if (!sset_contains(chassis_logical_ports, backend_nb->logical_port)) {
+                    continue;
+                }
+            }
+
             if (!backend_nb->health_check) {
                 continue;
             }
@@ -3821,8 +3829,11 @@ build_lb_vip_actions(const struct ovn_northd_lb *lb,
         drop = !n_active_backends && !lb_vip->empty_backend_rej;
         reject = !n_active_backends && lb_vip->empty_backend_rej;
     } else {
-        ds_put_format(action, "ct_lb_mark(backends=%s",
-                      lb_vip_nb->backend_ips);
+        if (chassis_backend_ips) {
+            ds_put_format(action, "ct_lb_mark(backends=%s", chassis_backend_ips);
+        } else {
+            ds_put_format(action, "ct_lb_mark(backends=%s", lb_vip_nb->backend_ips);
+        }
     }
 
     if (reject) {
@@ -8329,7 +8340,8 @@ build_lb_rules(struct lflow_table *lflows, struct ovn_lb_datapaths *lb_dps,
                const struct ovn_datapaths *ls_datapaths,
                struct ds *match, struct ds *action,
                const struct shash *meter_groups,
-               const struct hmap *svc_monitor_map)
+               const struct hmap *svc_monitor_map,
+               struct hmap *ls_ports)
 {
     const struct ovn_northd_lb *lb = lb_dps->lb;
     for (size_t i = 0; i < lb->n_vips; i++) {
@@ -8340,13 +8352,122 @@ build_lb_rules(struct lflow_table *lflows, struct ovn_lb_datapaths *lb_dps,
 
         ds_clear(action);
         ds_clear(match);
+        if (lb->prefer_local_backend) {
+            struct hmap chassis_lsp_map;
+            hmap_init(&chassis_lsp_map);
+
+            for (size_t j = 0; j < lb_vip->n_backends; j++) {
+                struct ovn_lb_backend *backend = &lb_vip->backends[j];
+                struct ovn_northd_lb_backend *backend_nb = &lb_vip_nb->backends_nb[j];
+                if (!backend_nb->logical_port) {
+                    continue;
+                }
+                struct ovn_port *op = ovn_port_find(ls_ports, backend_nb->logical_port);
+                if (!op || !op->sb || !op->sb->chassis) {
+                    continue;
+                }
+                struct chassis_lp_entry *entry = (struct chassis_lp_entry *)hmap_first_with_hash(&chassis_lsp_map, hash_string(op->sb->chassis->name, 0));
+                if (!entry) {
+                    entry = xmalloc(sizeof *entry);
+                    entry->chassis = op->sb->chassis;
+                    entry->lp_array = NULL;
+                    entry->n_lps = 0;
+                    entry->backend_ips = xstrdup("");
+                    hmap_insert(&chassis_lsp_map, &entry->hmap_node, hash_string(op->sb->chassis->name, 0));
+                    sset_init(&entry->logical_ports);
+                }
+
+                entry->lp_array = xrealloc(entry->lp_array, sizeof *entry->lp_array * (entry->n_lps + 1));
+                entry->lp_array[entry->n_lps] = op;
+                entry->n_lps++;
+
+                char *new_backend_ips = xasprintf("%s%s%s:%s", entry->backend_ips, entry->n_lps > 1 ? "," : "", backend->ip_str, backend->port_str);
+                free(entry->backend_ips);
+                entry->backend_ips = new_backend_ips;
+                sset_add(&entry->logical_ports, backend_nb->logical_port);
+            }
+
+            struct chassis_lp_entry *entry = NULL;
+            HMAP_FOR_EACH (entry, hmap_node, &chassis_lsp_map) {
+                ds_clear(match);
+                ds_clear(action);
+
+                /* New connections in Ingress table. */
+                const char *meter = NULL;
+                bool reject = build_lb_vip_actions(lb, lb_vip, lb_vip_nb, action,
+                                                   lb->selection_fields,
+                                                   NULL, NULL, true,
+                                                   svc_monitor_map, 
+                                                   entry->backend_ips, 
+                                                   &entry->logical_ports);
+
+                ds_put_format(match, "ct.new && %s.dst == %s", ip_match,
+                            lb_vip->vip_str);
+                int priority = 130;
+                if (lb_vip->port_str) {
+                    ds_put_format(match, " && %s.dst == %s", lb->proto,
+                                lb_vip->port_str);
+                    priority = 140;
+                }
+                ds_put_format(match, " && is_chassis_resident(\"%s\")",
+                        entry->lp_array[0]->key);
+
+                build_lb_affinity_ls_flows(lflows, lb_dps, lb_vip, ls_datapaths,
+                                        lb_dps->lflow_ref);
+
+                unsigned long *dp_non_meter = NULL;
+                bool build_non_meter = false;
+                if (reject) {
+                    size_t index;
 
+                    dp_non_meter = bitmap_clone(lb_dps->nb_ls_map,
+                                                ods_size(ls_datapaths));
+                    BITMAP_FOR_EACH_1 (index, ods_size(ls_datapaths),
+                                    lb_dps->nb_ls_map) {
+                        struct ovn_datapath *od = ls_datapaths->array[index];
+
+                        meter = copp_meter_get(COPP_REJECT, od->nbs->copp,
+                                            meter_groups);
+                        if (!meter) {
+                            build_non_meter = true;
+                            continue;
+                        }
+                        bitmap_set0(dp_non_meter, index);
+                        ovn_lflow_add_with_hint__(
+                                lflows, od, S_SWITCH_IN_LB, priority,
+                                ds_cstr(match), ds_cstr(action),
+                                NULL, meter, &lb->nlb->header_,
+                                lb_dps->lflow_ref);
+                    }
+                }
+                if (!reject || build_non_meter) {
+                    ovn_lflow_add_with_dp_group(
+                        lflows, dp_non_meter ? dp_non_meter : lb_dps->nb_ls_map,
+                        ods_size(ls_datapaths), S_SWITCH_IN_LB, priority,
+                        ds_cstr(match), ds_cstr(action), &lb->nlb->header_,
+                        lb_dps->lflow_ref);
+                }
+                bitmap_free(dp_non_meter);
+            }
+
+            struct chassis_lp_entry *next;
+            HMAP_FOR_EACH_SAFE (entry, next, hmap_node, &chassis_lsp_map) {
+                free(entry->lp_array);
+                free(entry->backend_ips);
+                free(entry);
+            }
+            hmap_destroy(&chassis_lsp_map);
+        }
+
+        ds_clear(match);
+        ds_clear(action);
         /* New connections in Ingress table. */
         const char *meter = NULL;
         bool reject = build_lb_vip_actions(lb, lb_vip, lb_vip_nb, action,
                                            lb->selection_fields,
                                            NULL, NULL, true,
-                                           svc_monitor_map);
+                                           svc_monitor_map, 
+                                           NULL, NULL);
 
         ds_put_format(match, "ct.new && %s.dst == %s", ip_match,
                       lb_vip->vip_str);
@@ -12423,7 +12544,7 @@ build_lrouter_nat_flows_for_lb(
     bool reject = build_lb_vip_actions(lb, lb_vip, vips_nb, action,
                                        lb->selection_fields, &skip_snat_act,
                                        &force_snat_act, false,
-                                       svc_monitor_map);
+                                       svc_monitor_map, NULL, NULL);
 
     /* Higher priority rules are added for load-balancing in DNAT
      * table.  For every match (on a VIP[:port]), we add two flows.
@@ -12581,6 +12702,7 @@ build_lswitch_flows_for_lb(struct ovn_lb_datapaths *lb_dps,
                            const struct shash *meter_groups,
                            const struct ovn_datapaths *ls_datapaths,
                            const struct hmap *svc_monitor_map,
+                           struct hmap *ls_ports,
                            struct ds *match, struct ds *action)
 {
     if (!lb_dps->n_nb_ls) {
@@ -12624,7 +12746,7 @@ build_lswitch_flows_for_lb(struct ovn_lb_datapaths *lb_dps,
      * REGBIT_CONNTRACK_COMMIT. */
     build_lb_rules_pre_stateful(lflows, lb_dps, ls_datapaths, match, action);
     build_lb_rules(lflows, lb_dps, ls_datapaths, match, action,
-                   meter_groups, svc_monitor_map);
+                   meter_groups, svc_monitor_map, ls_ports);
 }
 
 /* If there are any load balancing rules, we should send the packet to
@@ -18033,6 +18155,7 @@ build_lflows_thread(void *arg)
                                                lsi->meter_groups,
                                                lsi->ls_datapaths,
                                                lsi->svc_monitor_map,
+                                               lsi->ls_ports,
                                                &lsi->match, &lsi->actions);
                 }
             }
@@ -18267,6 +18390,7 @@ build_lswitch_and_lrouter_flows(
             build_lswitch_flows_for_lb(lb_dps, lsi.lflows, lsi.meter_groups,
                                        lsi.ls_datapaths,
                                        lsi.svc_monitor_map,
+                                       lsi.ls_ports,
                                        &lsi.match, &lsi.actions);
         }
         stopwatch_stop(LFLOWS_LBS_STOPWATCH_NAME, time_msec());
@@ -18636,6 +18760,7 @@ lflow_handle_northd_lb_changes(struct ovsdb_idl_txn *ovnsb_txn,
                                    lflow_input->meter_groups,
                                    lflow_input->ls_datapaths,
                                    lflow_input->svc_monitor_map,
+                                   lflow_input->ls_ports,
                                    &match, &actions);
 
         ds_destroy(&match);
diff --git a/northd/northd.h b/northd/northd.h
index 388bac6df5..d9f7eb12c0 100644
--- a/northd/northd.h
+++ b/northd/northd.h
@@ -813,6 +813,16 @@ find_route_outport(const struct hmap *lr_ports, const char *output_port,
                    bool force_out_port,
                    struct ovn_port **out_port, const char **lrp_addr_s);
 
+struct chassis_lp_entry {
+    struct hmap_node hmap_node;  // Node for storing in hash map
+    const struct sbrec_chassis *chassis;  // Pointer to chassis
+    struct ovn_port **lp_array;  // Array of logical ports
+    size_t n_lps;  // Number of logical ports
+    char *backend_ips;  // String storing all ls IPs
+    char *lp_names; // String storing all lp names
+    struct sset logical_ports;  // Set for storing logical ports
+};
+
 void ovnnb_db_run(struct northd_input *input_data,
                   struct northd_data *data,
                   struct ovsdb_idl_txn *ovnnb_txn,
