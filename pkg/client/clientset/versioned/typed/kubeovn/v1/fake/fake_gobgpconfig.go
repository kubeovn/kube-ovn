/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	context "context"

	v1 "github.com/kubeovn/kube-ovn/pkg/apis/kubeovn/v1"
	kubeovnv1 "github.com/kubeovn/kube-ovn/pkg/client/clientset/versioned/typed/kubeovn/v1"
	autoscalingv1 "k8s.io/api/autoscaling/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	gentype "k8s.io/client-go/gentype"
	testing "k8s.io/client-go/testing"
)

// fakeGobgpConfigs implements GobgpConfigInterface
type fakeGobgpConfigs struct {
	*gentype.FakeClientWithList[*v1.GobgpConfig, *v1.GobgpConfigList]
	Fake *FakeKubeovnV1
}

func newFakeGobgpConfigs(fake *FakeKubeovnV1, namespace string) kubeovnv1.GobgpConfigInterface {
	return &fakeGobgpConfigs{
		gentype.NewFakeClientWithList[*v1.GobgpConfig, *v1.GobgpConfigList](
			fake.Fake,
			namespace,
			v1.SchemeGroupVersion.WithResource("gobgp-configs"),
			v1.SchemeGroupVersion.WithKind("GobgpConfig"),
			func() *v1.GobgpConfig { return &v1.GobgpConfig{} },
			func() *v1.GobgpConfigList { return &v1.GobgpConfigList{} },
			func(dst, src *v1.GobgpConfigList) { dst.ListMeta = src.ListMeta },
			func(list *v1.GobgpConfigList) []*v1.GobgpConfig {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1.GobgpConfigList, items []*v1.GobgpConfig) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}

// GetScale takes name of the gobgpConfig, and returns the corresponding scale object, and an error if there is any.
func (c *fakeGobgpConfigs) GetScale(ctx context.Context, gobgpConfigName string, options metav1.GetOptions) (result *autoscalingv1.Scale, err error) {
	emptyResult := &autoscalingv1.Scale{}
	obj, err := c.Fake.
		Invokes(testing.NewGetSubresourceActionWithOptions(c.Resource(), c.Namespace(), "scale", gobgpConfigName, options), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*autoscalingv1.Scale), err
}

// UpdateScale takes the representation of a scale and updates it. Returns the server's representation of the scale, and an error, if there is any.
func (c *fakeGobgpConfigs) UpdateScale(ctx context.Context, gobgpConfigName string, scale *autoscalingv1.Scale, opts metav1.UpdateOptions) (result *autoscalingv1.Scale, err error) {
	emptyResult := &autoscalingv1.Scale{}
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceActionWithOptions(c.Resource(), "scale", c.Namespace(), scale, opts), &autoscalingv1.Scale{})

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*autoscalingv1.Scale), err
}
