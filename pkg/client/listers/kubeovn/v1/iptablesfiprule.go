/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/kubeovn/kube-ovn/pkg/apis/kubeovn/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IptablesFIPRuleLister helps list IptablesFIPRules.
// All objects returned here must be treated as read-only.
type IptablesFIPRuleLister interface {
	// List lists all IptablesFIPRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.IptablesFIPRule, err error)
	// Get retrieves the IptablesFIPRule from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.IptablesFIPRule, error)
	IptablesFIPRuleListerExpansion
}

// iptablesFIPRuleLister implements the IptablesFIPRuleLister interface.
type iptablesFIPRuleLister struct {
	indexer cache.Indexer
}

// NewIptablesFIPRuleLister returns a new IptablesFIPRuleLister.
func NewIptablesFIPRuleLister(indexer cache.Indexer) IptablesFIPRuleLister {
	return &iptablesFIPRuleLister{indexer: indexer}
}

// List lists all IptablesFIPRules in the indexer.
func (s *iptablesFIPRuleLister) List(selector labels.Selector) (ret []*v1.IptablesFIPRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.IptablesFIPRule))
	})
	return ret, err
}

// Get retrieves the IptablesFIPRule from the index for a given name.
func (s *iptablesFIPRuleLister) Get(name string) (*v1.IptablesFIPRule, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("iptablesfiprule"), name)
	}
	return obj.(*v1.IptablesFIPRule), nil
}
