/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/kubeovn/kube-ovn/pkg/apis/kubeovn/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VirtualIPLister helps list VirtualIPs.
// All objects returned here must be treated as read-only.
type VirtualIPLister interface {
	// List lists all VirtualIPs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.VirtualIP, err error)
	// Get retrieves the VirtualIP from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.VirtualIP, error)
	VirtualIPListerExpansion
}

// virtualIPLister implements the VirtualIPLister interface.
type virtualIPLister struct {
	indexer cache.Indexer
}

// NewVirtualIPLister returns a new VirtualIPLister.
func NewVirtualIPLister(indexer cache.Indexer) VirtualIPLister {
	return &virtualIPLister{indexer: indexer}
}

// List lists all VirtualIPs in the indexer.
func (s *virtualIPLister) List(selector labels.Selector) (ret []*v1.VirtualIP, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.VirtualIP))
	})
	return ret, err
}

// Get retrieves the VirtualIP from the index for a given name.
func (s *virtualIPLister) Get(name string) (*v1.VirtualIP, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("virtualip"), name)
	}
	return obj.(*v1.VirtualIP), nil
}
